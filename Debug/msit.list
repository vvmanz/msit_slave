
msit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f0  080030f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030f0  080030f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f0  080030f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003168  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003168  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a4a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d4  00000000  00000000  00026ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  000283b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  00028b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c5d  00000000  00000000  000291c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008869  00000000  00000000  00040e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083924  00000000  00000000  00049686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccfaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002624  00000000  00000000  000ccffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f70 	.word	0x08002f70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f70 	.word	0x08002f70

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fb23 	bl	800079c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f897 	bl	8000288 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f923 	bl	80003a4 <MX_GPIO_Init>
	MX_SPI1_Init();
 800015e:	f000 f8ed 	bl	800033c <MX_SPI1_Init>
	MX_CRC_Init();
 8000162:	f000 f8d7 	bl	8000314 <MX_CRC_Init>
//		if (counter > 500) {
//			HAL_SPI_TransmitReceive_IT(&hspi1,
//					(uint8_t*) (&spi_buffer_transmit),
//					(uint8_t*) (&spi_buffer_receive), 4);
//		}
		transmit[0] = 10 + rand()%10;
 8000166:	f001 fec5 	bl	8001ef4 <rand>
 800016a:	4601      	mov	r1, r0
 800016c:	4b41      	ldr	r3, [pc, #260]	; (8000274 <main+0x128>)
 800016e:	fb83 2301 	smull	r2, r3, r3, r1
 8000172:	109a      	asrs	r2, r3, #2
 8000174:	17cb      	asrs	r3, r1, #31
 8000176:	1ad2      	subs	r2, r2, r3
 8000178:	4613      	mov	r3, r2
 800017a:	009b      	lsls	r3, r3, #2
 800017c:	4413      	add	r3, r2
 800017e:	005b      	lsls	r3, r3, #1
 8000180:	1aca      	subs	r2, r1, r3
 8000182:	f102 030a 	add.w	r3, r2, #10
 8000186:	4a3c      	ldr	r2, [pc, #240]	; (8000278 <main+0x12c>)
 8000188:	6013      	str	r3, [r2, #0]
		transmit[1] = 20 + rand()%10;
 800018a:	f001 feb3 	bl	8001ef4 <rand>
 800018e:	4601      	mov	r1, r0
 8000190:	4b38      	ldr	r3, [pc, #224]	; (8000274 <main+0x128>)
 8000192:	fb83 2301 	smull	r2, r3, r3, r1
 8000196:	109a      	asrs	r2, r3, #2
 8000198:	17cb      	asrs	r3, r1, #31
 800019a:	1ad2      	subs	r2, r2, r3
 800019c:	4613      	mov	r3, r2
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	4413      	add	r3, r2
 80001a2:	005b      	lsls	r3, r3, #1
 80001a4:	1aca      	subs	r2, r1, r3
 80001a6:	f102 0314 	add.w	r3, r2, #20
 80001aa:	4a33      	ldr	r2, [pc, #204]	; (8000278 <main+0x12c>)
 80001ac:	6053      	str	r3, [r2, #4]
		transmit[2] = 30 + rand()%10;
 80001ae:	f001 fea1 	bl	8001ef4 <rand>
 80001b2:	4601      	mov	r1, r0
 80001b4:	4b2f      	ldr	r3, [pc, #188]	; (8000274 <main+0x128>)
 80001b6:	fb83 2301 	smull	r2, r3, r3, r1
 80001ba:	109a      	asrs	r2, r3, #2
 80001bc:	17cb      	asrs	r3, r1, #31
 80001be:	1ad2      	subs	r2, r2, r3
 80001c0:	4613      	mov	r3, r2
 80001c2:	009b      	lsls	r3, r3, #2
 80001c4:	4413      	add	r3, r2
 80001c6:	005b      	lsls	r3, r3, #1
 80001c8:	1aca      	subs	r2, r1, r3
 80001ca:	f102 031e 	add.w	r3, r2, #30
 80001ce:	4a2a      	ldr	r2, [pc, #168]	; (8000278 <main+0x12c>)
 80001d0:	6093      	str	r3, [r2, #8]
		transmit[3] = 40 + rand()%10;
 80001d2:	f001 fe8f 	bl	8001ef4 <rand>
 80001d6:	4601      	mov	r1, r0
 80001d8:	4b26      	ldr	r3, [pc, #152]	; (8000274 <main+0x128>)
 80001da:	fb83 2301 	smull	r2, r3, r3, r1
 80001de:	109a      	asrs	r2, r3, #2
 80001e0:	17cb      	asrs	r3, r1, #31
 80001e2:	1ad2      	subs	r2, r2, r3
 80001e4:	4613      	mov	r3, r2
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	4413      	add	r3, r2
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	1aca      	subs	r2, r1, r3
 80001ee:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80001f2:	4a21      	ldr	r2, [pc, #132]	; (8000278 <main+0x12c>)
 80001f4:	60d3      	str	r3, [r2, #12]
		transmit[4] = 50 + rand()%10;
 80001f6:	f001 fe7d 	bl	8001ef4 <rand>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4b1d      	ldr	r3, [pc, #116]	; (8000274 <main+0x128>)
 80001fe:	fb83 2301 	smull	r2, r3, r3, r1
 8000202:	109a      	asrs	r2, r3, #2
 8000204:	17cb      	asrs	r3, r1, #31
 8000206:	1ad2      	subs	r2, r2, r3
 8000208:	4613      	mov	r3, r2
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	4413      	add	r3, r2
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	1aca      	subs	r2, r1, r3
 8000212:	f102 0332 	add.w	r3, r2, #50	; 0x32
 8000216:	4a18      	ldr	r2, [pc, #96]	; (8000278 <main+0x12c>)
 8000218:	6113      	str	r3, [r2, #16]
		transmit[5] = 60 + rand()%10;
 800021a:	f001 fe6b 	bl	8001ef4 <rand>
 800021e:	4601      	mov	r1, r0
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <main+0x128>)
 8000222:	fb83 2301 	smull	r2, r3, r3, r1
 8000226:	109a      	asrs	r2, r3, #2
 8000228:	17cb      	asrs	r3, r1, #31
 800022a:	1ad2      	subs	r2, r2, r3
 800022c:	4613      	mov	r3, r2
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	4413      	add	r3, r2
 8000232:	005b      	lsls	r3, r3, #1
 8000234:	1aca      	subs	r2, r1, r3
 8000236:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 800023a:	4a0f      	ldr	r2, [pc, #60]	; (8000278 <main+0x12c>)
 800023c:	6153      	str	r3, [r2, #20]

		if (HAL_GPIO_ReadPin(SPI_NSS_GPIO_Port, SPI_NSS_Pin) == 1) {
 800023e:	2110      	movs	r1, #16
 8000240:	480e      	ldr	r0, [pc, #56]	; (800027c <main+0x130>)
 8000242:	f000 fe55 	bl	8000ef0 <HAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	2b01      	cmp	r3, #1
 800024a:	d18c      	bne.n	8000166 <main+0x1a>
			HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) (transmit),
 800024c:	2364      	movs	r3, #100	; 0x64
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	2318      	movs	r3, #24
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <main+0x134>)
 8000254:	4908      	ldr	r1, [pc, #32]	; (8000278 <main+0x12c>)
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <main+0x138>)
 8000258:	f001 face 	bl	80017f8 <HAL_SPI_TransmitReceive>
					(uint8_t*) (receive), 24,100);
			while (HAL_GPIO_ReadPin(SPI_NSS_GPIO_Port, SPI_NSS_Pin) == 1) {
 800025c:	e002      	b.n	8000264 <main+0x118>
				HAL_Delay(1);
 800025e:	2001      	movs	r0, #1
 8000260:	f000 fafe 	bl	8000860 <HAL_Delay>
			while (HAL_GPIO_ReadPin(SPI_NSS_GPIO_Port, SPI_NSS_Pin) == 1) {
 8000264:	2110      	movs	r1, #16
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <main+0x130>)
 8000268:	f000 fe42 	bl	8000ef0 <HAL_GPIO_ReadPin>
 800026c:	4603      	mov	r3, r0
 800026e:	2b01      	cmp	r3, #1
 8000270:	d0f5      	beq.n	800025e <main+0x112>
		transmit[0] = 10 + rand()%10;
 8000272:	e778      	b.n	8000166 <main+0x1a>
 8000274:	66666667 	.word	0x66666667
 8000278:	200000ec 	.word	0x200000ec
 800027c:	40010800 	.word	0x40010800
 8000280:	20000104 	.word	0x20000104
 8000284:	20000094 	.word	0x20000094

08000288 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b090      	sub	sp, #64	; 0x40
 800028c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2228      	movs	r2, #40	; 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fe24 	bl	8001ee4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002aa:	2301      	movs	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	2301      	movs	r3, #1
 80002ba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002bc:	2302      	movs	r3, #2
 80002be:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002cc:	f107 0318 	add.w	r3, r7, #24
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fe25 	bl	8000f20 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x58>
		Error_Handler();
 80002dc:	f000 f898 	bl	8000410 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 f892 	bl	8001424 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x82>
		Error_Handler();
 8000306:	f000 f883 	bl	8000410 <Error_Handler>
	}
}
 800030a:	bf00      	nop
 800030c:	3740      	adds	r7, #64	; 0x40
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_CRC_Init+0x20>)
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <MX_CRC_Init+0x24>)
 800031c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_CRC_Init+0x20>)
 8000320:	f000 fbcf 	bl	8000ac2 <HAL_CRC_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_CRC_Init+0x1a>
		Error_Handler();
 800032a:	f000 f871 	bl	8000410 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000008c 	.word	0x2000008c
 8000338:	40023000 	.word	0x40023000

0800033c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <MX_SPI1_Init+0x60>)
 8000342:	4a17      	ldr	r2, [pc, #92]	; (80003a0 <MX_SPI1_Init+0x64>)
 8000344:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_SPI1_Init+0x60>)
 8000348:	2200      	movs	r2, #0
 800034a:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_SPI1_Init+0x60>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_SPI1_Init+0x60>)
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <MX_SPI1_Init+0x60>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_SPI1_Init+0x60>)
 8000360:	2200      	movs	r2, #0
 8000362:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <MX_SPI1_Init+0x60>)
 8000366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800036a:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_SPI1_Init+0x60>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <MX_SPI1_Init+0x60>)
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_SPI1_Init+0x60>)
 800037a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_SPI1_Init+0x60>)
 8000382:	220a      	movs	r2, #10
 8000384:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_SPI1_Init+0x60>)
 8000388:	f001 f9b2 	bl	80016f0 <HAL_SPI_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_SPI1_Init+0x5a>
		Error_Handler();
 8000392:	f000 f83d 	bl	8000410 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000094 	.word	0x20000094
 80003a0:	40013000 	.word	0x40013000

080003a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_GPIO_Init+0x64>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <MX_GPIO_Init+0x64>)
 80003be:	f043 0320 	orr.w	r3, r3, #32
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <MX_GPIO_Init+0x64>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0320 	and.w	r3, r3, #32
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <MX_GPIO_Init+0x64>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <MX_GPIO_Init+0x64>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <MX_GPIO_Init+0x64>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0304 	and.w	r3, r3, #4
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : SPI_NSS_Pin */
	GPIO_InitStruct.Pin = SPI_NSS_Pin;
 80003e8:	2310      	movs	r3, #16
 80003ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 80003f4:	f107 0308 	add.w	r3, r7, #8
 80003f8:	4619      	mov	r1, r3
 80003fa:	4804      	ldr	r0, [pc, #16]	; (800040c <MX_GPIO_Init+0x68>)
 80003fc:	f000 fbf4 	bl	8000be8 <HAL_GPIO_Init>

}
 8000400:	bf00      	nop
 8000402:	3718      	adds	r7, #24
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40021000 	.word	0x40021000
 800040c:	40010800 	.word	0x40010800

08000410 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000414:	b672      	cpsid	i
}
 8000416:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000418:	e7fe      	b.n	8000418 <Error_Handler+0x8>
	...

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <HAL_MspInit+0x5c>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a14      	ldr	r2, [pc, #80]	; (8000478 <HAL_MspInit+0x5c>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x5c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <HAL_MspInit+0x5c>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_MspInit+0x60>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <HAL_MspInit+0x60>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000
 800047c:	40010000 	.word	0x40010000

08000480 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a09      	ldr	r2, [pc, #36]	; (80004b4 <HAL_CRC_MspInit+0x34>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d10b      	bne.n	80004aa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <HAL_CRC_MspInit+0x38>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a08      	ldr	r2, [pc, #32]	; (80004b8 <HAL_CRC_MspInit+0x38>)
 8000498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <HAL_CRC_MspInit+0x38>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	40023000 	.word	0x40023000
 80004b8:	40021000 	.word	0x40021000

080004bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a1f      	ldr	r2, [pc, #124]	; (8000554 <HAL_SPI_MspInit+0x98>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d137      	bne.n	800054c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004dc:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <HAL_SPI_MspInit+0x9c>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a1d      	ldr	r2, [pc, #116]	; (8000558 <HAL_SPI_MspInit+0x9c>)
 80004e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <HAL_SPI_MspInit+0x9c>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <HAL_SPI_MspInit+0x9c>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a17      	ldr	r2, [pc, #92]	; (8000558 <HAL_SPI_MspInit+0x9c>)
 80004fa:	f043 0304 	orr.w	r3, r3, #4
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_SPI_MspInit+0x9c>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0304 	and.w	r3, r3, #4
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800050c:	23a0      	movs	r3, #160	; 0xa0
 800050e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	480f      	ldr	r0, [pc, #60]	; (800055c <HAL_SPI_MspInit+0xa0>)
 8000520:	f000 fb62 	bl	8000be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000524:	2340      	movs	r3, #64	; 0x40
 8000526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000528:	2302      	movs	r3, #2
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4809      	ldr	r0, [pc, #36]	; (800055c <HAL_SPI_MspInit+0xa0>)
 8000538:	f000 fb56 	bl	8000be8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	2023      	movs	r0, #35	; 0x23
 8000542:	f000 fa88 	bl	8000a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000546:	2023      	movs	r0, #35	; 0x23
 8000548:	f000 faa1 	bl	8000a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40013000 	.word	0x40013000
 8000558:	40021000 	.word	0x40021000
 800055c:	40010800 	.word	0x40010800

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <NMI_Handler+0x4>

08000566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <HardFault_Handler+0x4>

0800056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <MemManage_Handler+0x4>

08000572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <BusFault_Handler+0x4>

08000578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <UsageFault_Handler+0x4>

0800057e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a6:	f000 f93f 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <SPI1_IRQHandler+0x10>)
 80005b6:	f001 fac1 	bl	8001b3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000094 	.word	0x20000094

080005c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return 1;
 80005c8:	2301      	movs	r3, #1
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <_kill>:

int _kill(int pid, int sig)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80005dc:	f001 fc58 	bl	8001e90 <__errno>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2216      	movs	r2, #22
 80005e4:	601a      	str	r2, [r3, #0]
  return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_exit>:

void _exit (int status)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80005fa:	f04f 31ff 	mov.w	r1, #4294967295
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff ffe7 	bl	80005d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000604:	e7fe      	b.n	8000604 <_exit+0x12>

08000606 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b086      	sub	sp, #24
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e00a      	b.n	800062e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000618:	f3af 8000 	nop.w
 800061c:	4601      	mov	r1, r0
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	60ba      	str	r2, [r7, #8]
 8000624:	b2ca      	uxtb	r2, r1
 8000626:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	3301      	adds	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	429a      	cmp	r2, r3
 8000634:	dbf0      	blt.n	8000618 <_read+0x12>
  }

  return len;
 8000636:	687b      	ldr	r3, [r7, #4]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	e009      	b.n	8000666 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	60ba      	str	r2, [r7, #8]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	3301      	adds	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	429a      	cmp	r2, r3
 800066c:	dbf1      	blt.n	8000652 <_write+0x12>
  }
  return len;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <_close>:

int _close(int file)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800069e:	605a      	str	r2, [r3, #4]
  return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <_isatty>:

int _isatty(int file)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b4:	2301      	movs	r3, #1
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <_sbrk+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <_sbrk+0x60>)
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <_sbrk+0x64>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <_sbrk+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d207      	bcs.n	8000718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000708:	f001 fbc2 	bl	8001e90 <__errno>
 800070c:	4603      	mov	r3, r0
 800070e:	220c      	movs	r2, #12
 8000710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	e009      	b.n	800072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <_sbrk+0x64>)
 8000728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20005000 	.word	0x20005000
 8000738:	00000400 	.word	0x00000400
 800073c:	2000011c 	.word	0x2000011c
 8000740:	20000138 	.word	0x20000138

08000744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	; (8000788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	; (8000794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000776:	f7ff ffe5 	bl	8000744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077a:	f001 fb8f 	bl	8001e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fce5 	bl	800014c <main>
  bx lr
 8000782:	4770      	bx	lr
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800078c:	080030f8 	.word	0x080030f8
  ldr r2, =_sbss
 8000790:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000794:	20000134 	.word	0x20000134

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f947 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fe30 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f95f 	bl	8000aaa <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f927 	bl	8000a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <HAL_IncTick+0x20>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000008 	.word	0x20000008
 8000848:	20000120 	.word	0x20000120

0800084c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000120 	.word	0x20000120

08000860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000868:	f7ff fff0 	bl	800084c <HAL_GetTick>
 800086c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000878:	d005      	beq.n	8000886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_Delay+0x44>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000886:	bf00      	nop
 8000888:	f7ff ffe0 	bl	800084c <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	d8f7      	bhi.n	8000888 <HAL_Delay+0x28>
  {
  }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4906      	ldr	r1, [pc, #24]	; (8000940 <__NVIC_EnableIRQ+0x34>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0a      	blt.n	800096e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	490c      	ldr	r1, [pc, #48]	; (8000990 <__NVIC_SetPriority+0x4c>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800096c:	e00a      	b.n	8000984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <__NVIC_SetPriority+0x50>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	3b04      	subs	r3, #4
 800097c:	0112      	lsls	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	440b      	add	r3, r1
 8000982:	761a      	strb	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	; 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	bf28      	it	cs
 80009b6:	2304      	movcs	r3, #4
 80009b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3304      	adds	r3, #4
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d902      	bls.n	80009c8 <NVIC_EncodePriority+0x30>
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3b03      	subs	r3, #3
 80009c6:	e000      	b.n	80009ca <NVIC_EncodePriority+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43da      	mvns	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	401a      	ands	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43d9      	mvns	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	4313      	orrs	r3, r2
         );
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3724      	adds	r7, #36	; 0x24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff90 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff2d 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff42 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff90 	bl	8000998 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5f 	bl	8000944 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff35 	bl	800090c <__NVIC_EnableIRQ>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffa2 	bl	80009fc <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d101      	bne.n	8000ad4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e00e      	b.n	8000af2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	795b      	ldrb	r3, [r3, #5]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d105      	bne.n	8000aea <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fccb 	bl	8000480 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2201      	movs	r2, #1
 8000aee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d005      	beq.n	8000b1e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2204      	movs	r2, #4
 8000b16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	e051      	b.n	8000bc2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 020e 	bic.w	r2, r2, #14
 8000b2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0201 	bic.w	r2, r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <HAL_DMA_Abort_IT+0xd0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d029      	beq.n	8000b9c <HAL_DMA_Abort_IT+0xa0>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a20      	ldr	r2, [pc, #128]	; (8000bd0 <HAL_DMA_Abort_IT+0xd4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d022      	beq.n	8000b98 <HAL_DMA_Abort_IT+0x9c>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <HAL_DMA_Abort_IT+0xd8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d01a      	beq.n	8000b92 <HAL_DMA_Abort_IT+0x96>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <HAL_DMA_Abort_IT+0xdc>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d012      	beq.n	8000b8c <HAL_DMA_Abort_IT+0x90>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <HAL_DMA_Abort_IT+0xe0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d00a      	beq.n	8000b86 <HAL_DMA_Abort_IT+0x8a>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1a      	ldr	r2, [pc, #104]	; (8000be0 <HAL_DMA_Abort_IT+0xe4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d102      	bne.n	8000b80 <HAL_DMA_Abort_IT+0x84>
 8000b7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b7e:	e00e      	b.n	8000b9e <HAL_DMA_Abort_IT+0xa2>
 8000b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b84:	e00b      	b.n	8000b9e <HAL_DMA_Abort_IT+0xa2>
 8000b86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8a:	e008      	b.n	8000b9e <HAL_DMA_Abort_IT+0xa2>
 8000b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b90:	e005      	b.n	8000b9e <HAL_DMA_Abort_IT+0xa2>
 8000b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b96:	e002      	b.n	8000b9e <HAL_DMA_Abort_IT+0xa2>
 8000b98:	2310      	movs	r3, #16
 8000b9a:	e000      	b.n	8000b9e <HAL_DMA_Abort_IT+0xa2>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <HAL_DMA_Abort_IT+0xe8>)
 8000ba0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	4798      	blx	r3
    } 
  }
  return status;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40020008 	.word	0x40020008
 8000bd0:	4002001c 	.word	0x4002001c
 8000bd4:	40020030 	.word	0x40020030
 8000bd8:	40020044 	.word	0x40020044
 8000bdc:	40020058 	.word	0x40020058
 8000be0:	4002006c 	.word	0x4002006c
 8000be4:	40020000 	.word	0x40020000

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b08b      	sub	sp, #44	; 0x2c
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bfa:	e169      	b.n	8000ed0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 8158 	bne.w	8000eca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	4a9a      	ldr	r2, [pc, #616]	; (8000e88 <HAL_GPIO_Init+0x2a0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d05e      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
 8000c24:	4a98      	ldr	r2, [pc, #608]	; (8000e88 <HAL_GPIO_Init+0x2a0>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d875      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c2a:	4a98      	ldr	r2, [pc, #608]	; (8000e8c <HAL_GPIO_Init+0x2a4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d058      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
 8000c30:	4a96      	ldr	r2, [pc, #600]	; (8000e8c <HAL_GPIO_Init+0x2a4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d86f      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c36:	4a96      	ldr	r2, [pc, #600]	; (8000e90 <HAL_GPIO_Init+0x2a8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d052      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
 8000c3c:	4a94      	ldr	r2, [pc, #592]	; (8000e90 <HAL_GPIO_Init+0x2a8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d869      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c42:	4a94      	ldr	r2, [pc, #592]	; (8000e94 <HAL_GPIO_Init+0x2ac>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d04c      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
 8000c48:	4a92      	ldr	r2, [pc, #584]	; (8000e94 <HAL_GPIO_Init+0x2ac>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d863      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c4e:	4a92      	ldr	r2, [pc, #584]	; (8000e98 <HAL_GPIO_Init+0x2b0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d046      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
 8000c54:	4a90      	ldr	r2, [pc, #576]	; (8000e98 <HAL_GPIO_Init+0x2b0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d85d      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c5a:	2b12      	cmp	r3, #18
 8000c5c:	d82a      	bhi.n	8000cb4 <HAL_GPIO_Init+0xcc>
 8000c5e:	2b12      	cmp	r3, #18
 8000c60:	d859      	bhi.n	8000d16 <HAL_GPIO_Init+0x12e>
 8000c62:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <HAL_GPIO_Init+0x80>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000ce3 	.word	0x08000ce3
 8000c6c:	08000cbd 	.word	0x08000cbd
 8000c70:	08000ccf 	.word	0x08000ccf
 8000c74:	08000d11 	.word	0x08000d11
 8000c78:	08000d17 	.word	0x08000d17
 8000c7c:	08000d17 	.word	0x08000d17
 8000c80:	08000d17 	.word	0x08000d17
 8000c84:	08000d17 	.word	0x08000d17
 8000c88:	08000d17 	.word	0x08000d17
 8000c8c:	08000d17 	.word	0x08000d17
 8000c90:	08000d17 	.word	0x08000d17
 8000c94:	08000d17 	.word	0x08000d17
 8000c98:	08000d17 	.word	0x08000d17
 8000c9c:	08000d17 	.word	0x08000d17
 8000ca0:	08000d17 	.word	0x08000d17
 8000ca4:	08000d17 	.word	0x08000d17
 8000ca8:	08000d17 	.word	0x08000d17
 8000cac:	08000cc5 	.word	0x08000cc5
 8000cb0:	08000cd9 	.word	0x08000cd9
 8000cb4:	4a79      	ldr	r2, [pc, #484]	; (8000e9c <HAL_GPIO_Init+0x2b4>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d013      	beq.n	8000ce2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cba:	e02c      	b.n	8000d16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	623b      	str	r3, [r7, #32]
          break;
 8000cc2:	e029      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	623b      	str	r3, [r7, #32]
          break;
 8000ccc:	e024      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	3308      	adds	r3, #8
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e01f      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	330c      	adds	r3, #12
 8000cde:	623b      	str	r3, [r7, #32]
          break;
 8000ce0:	e01a      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cea:	2304      	movs	r3, #4
 8000cec:	623b      	str	r3, [r7, #32]
          break;
 8000cee:	e013      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d105      	bne.n	8000d04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	611a      	str	r2, [r3, #16]
          break;
 8000d02:	e009      	b.n	8000d18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	615a      	str	r2, [r3, #20]
          break;
 8000d0e:	e003      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
          break;
 8000d14:	e000      	b.n	8000d18 <HAL_GPIO_Init+0x130>
          break;
 8000d16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	2bff      	cmp	r3, #255	; 0xff
 8000d1c:	d801      	bhi.n	8000d22 <HAL_GPIO_Init+0x13a>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	e001      	b.n	8000d26 <HAL_GPIO_Init+0x13e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3304      	adds	r3, #4
 8000d26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2bff      	cmp	r3, #255	; 0xff
 8000d2c:	d802      	bhi.n	8000d34 <HAL_GPIO_Init+0x14c>
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x152>
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	3b08      	subs	r3, #8
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	210f      	movs	r1, #15
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	6a39      	ldr	r1, [r7, #32]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	431a      	orrs	r2, r3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 80b1 	beq.w	8000eca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d68:	4b4d      	ldr	r3, [pc, #308]	; (8000ea0 <HAL_GPIO_Init+0x2b8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ea0 <HAL_GPIO_Init+0x2b8>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <HAL_GPIO_Init+0x2b8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d80:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <HAL_GPIO_Init+0x2bc>)
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	3302      	adds	r3, #2
 8000d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a40      	ldr	r2, [pc, #256]	; (8000ea8 <HAL_GPIO_Init+0x2c0>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d013      	beq.n	8000dd4 <HAL_GPIO_Init+0x1ec>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a3f      	ldr	r2, [pc, #252]	; (8000eac <HAL_GPIO_Init+0x2c4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d00d      	beq.n	8000dd0 <HAL_GPIO_Init+0x1e8>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3e      	ldr	r2, [pc, #248]	; (8000eb0 <HAL_GPIO_Init+0x2c8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d007      	beq.n	8000dcc <HAL_GPIO_Init+0x1e4>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3d      	ldr	r2, [pc, #244]	; (8000eb4 <HAL_GPIO_Init+0x2cc>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d101      	bne.n	8000dc8 <HAL_GPIO_Init+0x1e0>
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e006      	b.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000dc8:	2304      	movs	r3, #4
 8000dca:	e004      	b.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e002      	b.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <HAL_GPIO_Init+0x1ee>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd8:	f002 0203 	and.w	r2, r2, #3
 8000ddc:	0092      	lsls	r2, r2, #2
 8000dde:	4093      	lsls	r3, r2
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000de6:	492f      	ldr	r1, [pc, #188]	; (8000ea4 <HAL_GPIO_Init+0x2bc>)
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e00:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	492c      	ldr	r1, [pc, #176]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4928      	ldr	r1, [pc, #160]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	4922      	ldr	r1, [pc, #136]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	604b      	str	r3, [r1, #4]
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	491e      	ldr	r1, [pc, #120]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	4918      	ldr	r1, [pc, #96]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	608b      	str	r3, [r1, #8]
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	4914      	ldr	r1, [pc, #80]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d021      	beq.n	8000ebc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	490e      	ldr	r1, [pc, #56]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60cb      	str	r3, [r1, #12]
 8000e84:	e021      	b.n	8000eca <HAL_GPIO_Init+0x2e2>
 8000e86:	bf00      	nop
 8000e88:	10320000 	.word	0x10320000
 8000e8c:	10310000 	.word	0x10310000
 8000e90:	10220000 	.word	0x10220000
 8000e94:	10210000 	.word	0x10210000
 8000e98:	10120000 	.word	0x10120000
 8000e9c:	10110000 	.word	0x10110000
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010000 	.word	0x40010000
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	40010c00 	.word	0x40010c00
 8000eb0:	40011000 	.word	0x40011000
 8000eb4:	40011400 	.word	0x40011400
 8000eb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	4909      	ldr	r1, [pc, #36]	; (8000eec <HAL_GPIO_Init+0x304>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	3301      	adds	r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f47f ae8e 	bne.w	8000bfc <HAL_GPIO_Init+0x14>
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	372c      	adds	r7, #44	; 0x2c
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e001      	b.n	8000f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
	...

08000f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e272      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8087 	beq.w	800104e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f40:	4b92      	ldr	r3, [pc, #584]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d00c      	beq.n	8000f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f4c:	4b8f      	ldr	r3, [pc, #572]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d112      	bne.n	8000f7e <HAL_RCC_OscConfig+0x5e>
 8000f58:	4b8c      	ldr	r3, [pc, #560]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f64:	d10b      	bne.n	8000f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f66:	4b89      	ldr	r3, [pc, #548]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d06c      	beq.n	800104c <HAL_RCC_OscConfig+0x12c>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d168      	bne.n	800104c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e24c      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f86:	d106      	bne.n	8000f96 <HAL_RCC_OscConfig+0x76>
 8000f88:	4b80      	ldr	r3, [pc, #512]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a7f      	ldr	r2, [pc, #508]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	e02e      	b.n	8000ff4 <HAL_RCC_OscConfig+0xd4>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x98>
 8000f9e:	4b7b      	ldr	r3, [pc, #492]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a7a      	ldr	r2, [pc, #488]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b78      	ldr	r3, [pc, #480]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a77      	ldr	r2, [pc, #476]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e01d      	b.n	8000ff4 <HAL_RCC_OscConfig+0xd4>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0xbc>
 8000fc2:	4b72      	ldr	r3, [pc, #456]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a71      	ldr	r2, [pc, #452]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b6f      	ldr	r3, [pc, #444]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a6e      	ldr	r2, [pc, #440]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e00b      	b.n	8000ff4 <HAL_RCC_OscConfig+0xd4>
 8000fdc:	4b6b      	ldr	r3, [pc, #428]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a6a      	ldr	r2, [pc, #424]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b68      	ldr	r3, [pc, #416]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a67      	ldr	r2, [pc, #412]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fc26 	bl	800084c <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fc22 	bl	800084c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e200      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	4b5d      	ldr	r3, [pc, #372]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0xe4>
 8001022:	e014      	b.n	800104e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fc12 	bl	800084c <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fc0e 	bl	800084c <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e1ec      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	4b53      	ldr	r3, [pc, #332]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x10c>
 800104a:	e000      	b.n	800104e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d063      	beq.n	8001122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800105a:	4b4c      	ldr	r3, [pc, #304]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001066:	4b49      	ldr	r3, [pc, #292]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	2b08      	cmp	r3, #8
 8001070:	d11c      	bne.n	80010ac <HAL_RCC_OscConfig+0x18c>
 8001072:	4b46      	ldr	r3, [pc, #280]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d116      	bne.n	80010ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	4b43      	ldr	r3, [pc, #268]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <HAL_RCC_OscConfig+0x176>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d001      	beq.n	8001096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e1c0      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4939      	ldr	r1, [pc, #228]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	e03a      	b.n	8001122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d020      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b4:	4b36      	ldr	r3, [pc, #216]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fbc7 	bl	800084c <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fbc3 	bl	800084c <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e1a1      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4927      	ldr	r1, [pc, #156]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
 80010f4:	e015      	b.n	8001122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <HAL_RCC_OscConfig+0x270>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fba6 	bl	800084c <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fba2 	bl	800084c <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e180      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d03a      	beq.n	80011a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d019      	beq.n	800116a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_RCC_OscConfig+0x274>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113c:	f7ff fb86 	bl	800084c <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fb82 	bl	800084c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e160      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_RCC_OscConfig+0x26c>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f000 faa6 	bl	80016b4 <RCC_Delay>
 8001168:	e01c      	b.n	80011a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_RCC_OscConfig+0x274>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001170:	f7ff fb6c 	bl	800084c <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001176:	e00f      	b.n	8001198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001178:	f7ff fb68 	bl	800084c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d908      	bls.n	8001198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e146      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	42420000 	.word	0x42420000
 8001194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001198:	4b92      	ldr	r3, [pc, #584]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1e9      	bne.n	8001178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80a6 	beq.w	80012fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b6:	4b8b      	ldr	r3, [pc, #556]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10d      	bne.n	80011de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b88      	ldr	r3, [pc, #544]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a87      	ldr	r2, [pc, #540]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b85      	ldr	r3, [pc, #532]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011da:	2301      	movs	r3, #1
 80011dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011de:	4b82      	ldr	r3, [pc, #520]	; (80013e8 <HAL_RCC_OscConfig+0x4c8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d118      	bne.n	800121c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ea:	4b7f      	ldr	r3, [pc, #508]	; (80013e8 <HAL_RCC_OscConfig+0x4c8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a7e      	ldr	r2, [pc, #504]	; (80013e8 <HAL_RCC_OscConfig+0x4c8>)
 80011f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fb29 	bl	800084c <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fe:	f7ff fb25 	bl	800084c <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b64      	cmp	r3, #100	; 0x64
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e103      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001210:	4b75      	ldr	r3, [pc, #468]	; (80013e8 <HAL_RCC_OscConfig+0x4c8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d106      	bne.n	8001232 <HAL_RCC_OscConfig+0x312>
 8001224:	4b6f      	ldr	r3, [pc, #444]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4a6e      	ldr	r2, [pc, #440]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6213      	str	r3, [r2, #32]
 8001230:	e02d      	b.n	800128e <HAL_RCC_OscConfig+0x36e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10c      	bne.n	8001254 <HAL_RCC_OscConfig+0x334>
 800123a:	4b6a      	ldr	r3, [pc, #424]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a69      	ldr	r2, [pc, #420]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	4b67      	ldr	r3, [pc, #412]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	4a66      	ldr	r2, [pc, #408]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	f023 0304 	bic.w	r3, r3, #4
 8001250:	6213      	str	r3, [r2, #32]
 8001252:	e01c      	b.n	800128e <HAL_RCC_OscConfig+0x36e>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b05      	cmp	r3, #5
 800125a:	d10c      	bne.n	8001276 <HAL_RCC_OscConfig+0x356>
 800125c:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a60      	ldr	r2, [pc, #384]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	4b5e      	ldr	r3, [pc, #376]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4a5d      	ldr	r2, [pc, #372]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6213      	str	r3, [r2, #32]
 8001274:	e00b      	b.n	800128e <HAL_RCC_OscConfig+0x36e>
 8001276:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a5a      	ldr	r2, [pc, #360]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6213      	str	r3, [r2, #32]
 8001282:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	4a57      	ldr	r2, [pc, #348]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	f023 0304 	bic.w	r3, r3, #4
 800128c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d015      	beq.n	80012c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fad9 	bl	800084c <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff fad5 	bl	800084c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e0b1      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b4:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0ee      	beq.n	800129e <HAL_RCC_OscConfig+0x37e>
 80012c0:	e014      	b.n	80012ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fac3 	bl	800084c <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff fabf 	bl	800084c <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e09b      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1ee      	bne.n	80012ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d105      	bne.n	80012fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f2:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a3b      	ldr	r2, [pc, #236]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8087 	beq.w	8001416 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 030c 	and.w	r3, r3, #12
 8001310:	2b08      	cmp	r3, #8
 8001312:	d061      	beq.n	80013d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d146      	bne.n	80013aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131c:	4b33      	ldr	r3, [pc, #204]	; (80013ec <HAL_RCC_OscConfig+0x4cc>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff fa93 	bl	800084c <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132a:	f7ff fa8f 	bl	800084c <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e06d      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001350:	d108      	bne.n	8001364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4921      	ldr	r1, [pc, #132]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a19      	ldr	r1, [r3, #32]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	430b      	orrs	r3, r1
 8001376:	491b      	ldr	r1, [pc, #108]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_RCC_OscConfig+0x4cc>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff fa63 	bl	800084c <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138a:	f7ff fa5f 	bl	800084c <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e03d      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x46a>
 80013a8:	e035      	b.n	8001416 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_RCC_OscConfig+0x4cc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fa4c 	bl	800084c <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b8:	f7ff fa48 	bl	800084c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e026      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x498>
 80013d6:	e01e      	b.n	8001416 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d107      	bne.n	80013f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e019      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40007000 	.word	0x40007000
 80013ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x500>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	429a      	cmp	r2, r3
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140e:	429a      	cmp	r2, r3
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0d0      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001438:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d910      	bls.n	8001468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b67      	ldr	r3, [pc, #412]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 0207 	bic.w	r2, r3, #7
 800144e:	4965      	ldr	r1, [pc, #404]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0b8      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001480:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a58      	ldr	r2, [pc, #352]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800148a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001498:	4b53      	ldr	r3, [pc, #332]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a52      	ldr	r2, [pc, #328]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a4:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	494d      	ldr	r1, [pc, #308]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d040      	beq.n	8001544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d115      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e07f      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e073      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e06b      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001502:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f023 0203 	bic.w	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4936      	ldr	r1, [pc, #216]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff f99a 	bl	800084c <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	e00a      	b.n	8001532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151c:	f7ff f996 	bl	800084c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	; 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e053      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 020c 	and.w	r2, r3, #12
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	429a      	cmp	r2, r3
 8001542:	d1eb      	bne.n	800151c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d210      	bcs.n	8001574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 0207 	bic.w	r2, r3, #7
 800155a:	4922      	ldr	r1, [pc, #136]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e032      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4916      	ldr	r1, [pc, #88]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	490e      	ldr	r1, [pc, #56]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015b2:	f000 f821 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	490a      	ldr	r1, [pc, #40]	; (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80015c4:	5ccb      	ldrb	r3, [r1, r3]
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_RCC_ClockConfig+0x1cc>)
 80015cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_RCC_ClockConfig+0x1d0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f8f8 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40022000 	.word	0x40022000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	08002f98 	.word	0x08002f98
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f8:	b490      	push	{r4, r7}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001600:	1d3c      	adds	r4, r7, #4
 8001602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001608:	f240 2301 	movw	r3, #513	; 0x201
 800160c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b04      	cmp	r3, #4
 8001630:	d002      	beq.n	8001638 <HAL_RCC_GetSysClockFreq+0x40>
 8001632:	2b08      	cmp	r3, #8
 8001634:	d003      	beq.n	800163e <HAL_RCC_GetSysClockFreq+0x46>
 8001636:	e02b      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800163a:	623b      	str	r3, [r7, #32]
      break;
 800163c:	e02b      	b.n	8001696 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	0c9b      	lsrs	r3, r3, #18
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3328      	adds	r3, #40	; 0x28
 8001648:	443b      	add	r3, r7
 800164a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800164e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d012      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	0c5b      	lsrs	r3, r3, #17
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	3328      	adds	r3, #40	; 0x28
 8001666:	443b      	add	r3, r7
 8001668:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800166c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001672:	fb03 f202 	mul.w	r2, r3, r2
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	fbb2 f3f3 	udiv	r3, r2, r3
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
 800167e:	e004      	b.n	800168a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	623b      	str	r3, [r7, #32]
      break;
 800168e:	e002      	b.n	8001696 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001692:	623b      	str	r3, [r7, #32]
      break;
 8001694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001696:	6a3b      	ldr	r3, [r7, #32]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bc90      	pop	{r4, r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	08002f88 	.word	0x08002f88
 80016a8:	40021000 	.word	0x40021000
 80016ac:	007a1200 	.word	0x007a1200
 80016b0:	003d0900 	.word	0x003d0900

080016b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <RCC_Delay+0x34>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <RCC_Delay+0x38>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0a5b      	lsrs	r3, r3, #9
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016d0:	bf00      	nop
  }
  while (Delay --);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	60fa      	str	r2, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f9      	bne.n	80016d0 <RCC_Delay+0x1c>
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000000 	.word	0x20000000
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e076      	b.n	80017f0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	2b00      	cmp	r3, #0
 8001708:	d108      	bne.n	800171c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001712:	d009      	beq.n	8001728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
 800171a:	e005      	b.n	8001728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7fe feba 	bl	80004bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800175e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ac:	ea42 0103 	orr.w	r1, r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	0c1a      	lsrs	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f002 0204 	and.w	r2, r2, #4
 80017ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08c      	sub	sp, #48	; 0x30
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001806:	2301      	movs	r3, #1
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_SPI_TransmitReceive+0x26>
 800181a:	2302      	movs	r3, #2
 800181c:	e18a      	b.n	8001b34 <HAL_SPI_TransmitReceive+0x33c>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001826:	f7ff f811 	bl	800084c <HAL_GetTick>
 800182a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001844:	2b01      	cmp	r3, #1
 8001846:	d00f      	beq.n	8001868 <HAL_SPI_TransmitReceive+0x70>
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800184e:	d107      	bne.n	8001860 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <HAL_SPI_TransmitReceive+0x68>
 8001858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800185c:	2b04      	cmp	r3, #4
 800185e:	d003      	beq.n	8001868 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001860:	2302      	movs	r3, #2
 8001862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001866:	e15b      	b.n	8001b20 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_SPI_TransmitReceive+0x82>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_SPI_TransmitReceive+0x82>
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d103      	bne.n	8001882 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001880:	e14e      	b.n	8001b20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b04      	cmp	r3, #4
 800188c:	d003      	beq.n	8001896 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2205      	movs	r2, #5
 8001892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	887a      	ldrh	r2, [r7, #2]
 80018a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	887a      	ldrh	r2, [r7, #2]
 80018be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d6:	2b40      	cmp	r3, #64	; 0x40
 80018d8:	d007      	beq.n	80018ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f2:	d178      	bne.n	80019e6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_SPI_TransmitReceive+0x10a>
 80018fc:	8b7b      	ldrh	r3, [r7, #26]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d166      	bne.n	80019d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	881a      	ldrh	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	1c9a      	adds	r2, r3, #2
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001926:	e053      	b.n	80019d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b02      	cmp	r3, #2
 8001934:	d11b      	bne.n	800196e <HAL_SPI_TransmitReceive+0x176>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800193a:	b29b      	uxth	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d016      	beq.n	800196e <HAL_SPI_TransmitReceive+0x176>
 8001940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001942:	2b01      	cmp	r3, #1
 8001944:	d113      	bne.n	800196e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	881a      	ldrh	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	1c9a      	adds	r2, r3, #2
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001960:	b29b      	uxth	r3, r3
 8001962:	3b01      	subs	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d119      	bne.n	80019b0 <HAL_SPI_TransmitReceive+0x1b8>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001980:	b29b      	uxth	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d014      	beq.n	80019b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	b292      	uxth	r2, r2
 8001992:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001998:	1c9a      	adds	r2, r3, #2
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80019ac:	2301      	movs	r3, #1
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80019b0:	f7fe ff4c 	bl	800084c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019bc:	429a      	cmp	r2, r3
 80019be:	d807      	bhi.n	80019d0 <HAL_SPI_TransmitReceive+0x1d8>
 80019c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c6:	d003      	beq.n	80019d0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80019ce:	e0a7      	b.n	8001b20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1a6      	bne.n	8001928 <HAL_SPI_TransmitReceive+0x130>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1a1      	bne.n	8001928 <HAL_SPI_TransmitReceive+0x130>
 80019e4:	e07c      	b.n	8001ae0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_SPI_TransmitReceive+0x1fc>
 80019ee:	8b7b      	ldrh	r3, [r7, #26]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d16b      	bne.n	8001acc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	330c      	adds	r3, #12
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a1a:	e057      	b.n	8001acc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d11c      	bne.n	8001a64 <HAL_SPI_TransmitReceive+0x26c>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d017      	beq.n	8001a64 <HAL_SPI_TransmitReceive+0x26c>
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d114      	bne.n	8001a64 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	330c      	adds	r3, #12
 8001a44:	7812      	ldrb	r2, [r2, #0]
 8001a46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d119      	bne.n	8001aa6 <HAL_SPI_TransmitReceive+0x2ae>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d014      	beq.n	8001aa6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001aa6:	f7fe fed1 	bl	800084c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d803      	bhi.n	8001abe <HAL_SPI_TransmitReceive+0x2c6>
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d102      	bne.n	8001ac4 <HAL_SPI_TransmitReceive+0x2cc>
 8001abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d103      	bne.n	8001acc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001aca:	e029      	b.n	8001b20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1a2      	bne.n	8001a1c <HAL_SPI_TransmitReceive+0x224>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d19d      	bne.n	8001a1c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f9b5 	bl	8001e54 <SPI_EndRxTxTransaction>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2220      	movs	r2, #32
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001afc:	e010      	b.n	8001b20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10b      	bne.n	8001b1e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	e000      	b.n	8001b20 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001b1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3730      	adds	r7, #48	; 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10f      	bne.n	8001b80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	4798      	blx	r3
    return;
 8001b7e:	e0be      	b.n	8001cfe <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	085b      	lsrs	r3, r3, #1
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_SPI_IRQHandler+0x66>
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	09db      	lsrs	r3, r3, #7
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
    return;
 8001ba0:	e0ad      	b.n	8001cfe <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	095b      	lsrs	r3, r3, #5
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_SPI_IRQHandler+0x80>
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	099b      	lsrs	r3, r3, #6
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80a1 	beq.w	8001cfe <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 809a 	beq.w	8001cfe <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d023      	beq.n	8001c1e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d011      	beq.n	8001c06 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	f043 0204 	orr.w	r2, r3, #4
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	e00b      	b.n	8001c1e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	693b      	ldr	r3, [r7, #16]
        return;
 8001c1c:	e06f      	b.n	8001cfe <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d014      	beq.n	8001c54 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d04f      	beq.n	8001cfc <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001c6a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d104      	bne.n	8001c88 <HAL_SPI_IRQHandler+0x14c>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d034      	beq.n	8001cf2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0203 	bic.w	r2, r2, #3
 8001c96:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d011      	beq.n	8001cc4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <HAL_SPI_IRQHandler+0x1c8>)
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe ff25 	bl	8000afc <HAL_DMA_Abort_IT>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd0:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <HAL_SPI_IRQHandler+0x1c8>)
 8001cd2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe ff0f 	bl	8000afc <HAL_DMA_Abort_IT>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00a      	beq.n	8001cfa <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001cf0:	e003      	b.n	8001cfa <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f808 	bl	8001d08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001cf8:	e000      	b.n	8001cfc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8001cfa:	bf00      	nop
    return;
 8001cfc:	bf00      	nop
  }
}
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	08001d1b 	.word	0x08001d1b

08001d08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7ff ffe7 	bl	8001d08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d54:	f7fe fd7a 	bl	800084c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	4413      	add	r3, r2
 8001d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d64:	f7fe fd72 	bl	800084c <HAL_GetTick>
 8001d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d6a:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	015b      	lsls	r3, r3, #5
 8001d70:	0d1b      	lsrs	r3, r3, #20
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d7a:	e054      	b.n	8001e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d82:	d050      	beq.n	8001e26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d84:	f7fe fd62 	bl	800084c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d902      	bls.n	8001d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d13d      	bne.n	8001e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001db2:	d111      	bne.n	8001dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dbc:	d004      	beq.n	8001dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc6:	d107      	bne.n	8001dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de0:	d10f      	bne.n	8001e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e017      	b.n	8001e46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d19b      	bne.n	8001d7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3720      	adds	r7, #32
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000000 	.word	0x20000000

08001e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2200      	movs	r2, #0
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff ff6a 	bl	8001d44 <SPI_WaitFlagStateUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	f043 0220 	orr.w	r2, r3, #32
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e000      	b.n	8001e88 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <__errno>:
 8001e90:	4b01      	ldr	r3, [pc, #4]	; (8001e98 <__errno+0x8>)
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	2000000c 	.word	0x2000000c

08001e9c <__libc_init_array>:
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	2600      	movs	r6, #0
 8001ea0:	4d0c      	ldr	r5, [pc, #48]	; (8001ed4 <__libc_init_array+0x38>)
 8001ea2:	4c0d      	ldr	r4, [pc, #52]	; (8001ed8 <__libc_init_array+0x3c>)
 8001ea4:	1b64      	subs	r4, r4, r5
 8001ea6:	10a4      	asrs	r4, r4, #2
 8001ea8:	42a6      	cmp	r6, r4
 8001eaa:	d109      	bne.n	8001ec0 <__libc_init_array+0x24>
 8001eac:	f001 f860 	bl	8002f70 <_init>
 8001eb0:	2600      	movs	r6, #0
 8001eb2:	4d0a      	ldr	r5, [pc, #40]	; (8001edc <__libc_init_array+0x40>)
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	; (8001ee0 <__libc_init_array+0x44>)
 8001eb6:	1b64      	subs	r4, r4, r5
 8001eb8:	10a4      	asrs	r4, r4, #2
 8001eba:	42a6      	cmp	r6, r4
 8001ebc:	d105      	bne.n	8001eca <__libc_init_array+0x2e>
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
 8001ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec4:	4798      	blx	r3
 8001ec6:	3601      	adds	r6, #1
 8001ec8:	e7ee      	b.n	8001ea8 <__libc_init_array+0xc>
 8001eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ece:	4798      	blx	r3
 8001ed0:	3601      	adds	r6, #1
 8001ed2:	e7f2      	b.n	8001eba <__libc_init_array+0x1e>
 8001ed4:	080030f0 	.word	0x080030f0
 8001ed8:	080030f0 	.word	0x080030f0
 8001edc:	080030f0 	.word	0x080030f0
 8001ee0:	080030f4 	.word	0x080030f4

08001ee4 <memset>:
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4402      	add	r2, r0
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d100      	bne.n	8001eee <memset+0xa>
 8001eec:	4770      	bx	lr
 8001eee:	f803 1b01 	strb.w	r1, [r3], #1
 8001ef2:	e7f9      	b.n	8001ee8 <memset+0x4>

08001ef4 <rand>:
 8001ef4:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <rand+0x5c>)
 8001ef6:	b510      	push	{r4, lr}
 8001ef8:	681c      	ldr	r4, [r3, #0]
 8001efa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001efc:	b9b3      	cbnz	r3, 8001f2c <rand+0x38>
 8001efe:	2018      	movs	r0, #24
 8001f00:	f000 f866 	bl	8001fd0 <malloc>
 8001f04:	4602      	mov	r2, r0
 8001f06:	63a0      	str	r0, [r4, #56]	; 0x38
 8001f08:	b920      	cbnz	r0, 8001f14 <rand+0x20>
 8001f0a:	214e      	movs	r1, #78	; 0x4e
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <rand+0x60>)
 8001f0e:	4812      	ldr	r0, [pc, #72]	; (8001f58 <rand+0x64>)
 8001f10:	f000 f82e 	bl	8001f70 <__assert_func>
 8001f14:	4911      	ldr	r1, [pc, #68]	; (8001f5c <rand+0x68>)
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <rand+0x6c>)
 8001f18:	e9c0 1300 	strd	r1, r3, [r0]
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <rand+0x70>)
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6083      	str	r3, [r0, #8]
 8001f22:	230b      	movs	r3, #11
 8001f24:	8183      	strh	r3, [r0, #12]
 8001f26:	2001      	movs	r0, #1
 8001f28:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001f2c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <rand+0x74>)
 8001f30:	6920      	ldr	r0, [r4, #16]
 8001f32:	6963      	ldr	r3, [r4, #20]
 8001f34:	4342      	muls	r2, r0
 8001f36:	490d      	ldr	r1, [pc, #52]	; (8001f6c <rand+0x78>)
 8001f38:	fb01 2203 	mla	r2, r1, r3, r2
 8001f3c:	fba0 0101 	umull	r0, r1, r0, r1
 8001f40:	1c43      	adds	r3, r0, #1
 8001f42:	eb42 0001 	adc.w	r0, r2, r1
 8001f46:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8001f4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001f4e:	bd10      	pop	{r4, pc}
 8001f50:	2000000c 	.word	0x2000000c
 8001f54:	08002fac 	.word	0x08002fac
 8001f58:	08002fc3 	.word	0x08002fc3
 8001f5c:	abcd330e 	.word	0xabcd330e
 8001f60:	e66d1234 	.word	0xe66d1234
 8001f64:	0005deec 	.word	0x0005deec
 8001f68:	5851f42d 	.word	0x5851f42d
 8001f6c:	4c957f2d 	.word	0x4c957f2d

08001f70 <__assert_func>:
 8001f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001f72:	4614      	mov	r4, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <__assert_func+0x2c>)
 8001f78:	4605      	mov	r5, r0
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68d8      	ldr	r0, [r3, #12]
 8001f7e:	b14c      	cbz	r4, 8001f94 <__assert_func+0x24>
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <__assert_func+0x30>)
 8001f82:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001f86:	9100      	str	r1, [sp, #0]
 8001f88:	462b      	mov	r3, r5
 8001f8a:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <__assert_func+0x34>)
 8001f8c:	f000 f80e 	bl	8001fac <fiprintf>
 8001f90:	f000 fcc0 	bl	8002914 <abort>
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <__assert_func+0x38>)
 8001f96:	461c      	mov	r4, r3
 8001f98:	e7f3      	b.n	8001f82 <__assert_func+0x12>
 8001f9a:	bf00      	nop
 8001f9c:	2000000c 	.word	0x2000000c
 8001fa0:	0800301e 	.word	0x0800301e
 8001fa4:	0800302b 	.word	0x0800302b
 8001fa8:	08003059 	.word	0x08003059

08001fac <fiprintf>:
 8001fac:	b40e      	push	{r1, r2, r3}
 8001fae:	b503      	push	{r0, r1, lr}
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	ab03      	add	r3, sp, #12
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <fiprintf+0x20>)
 8001fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fba:	6800      	ldr	r0, [r0, #0]
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	f000 f913 	bl	80021e8 <_vfiprintf_r>
 8001fc2:	b002      	add	sp, #8
 8001fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fc8:	b003      	add	sp, #12
 8001fca:	4770      	bx	lr
 8001fcc:	2000000c 	.word	0x2000000c

08001fd0 <malloc>:
 8001fd0:	4b02      	ldr	r3, [pc, #8]	; (8001fdc <malloc+0xc>)
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	f000 b86b 	b.w	80020b0 <_malloc_r>
 8001fda:	bf00      	nop
 8001fdc:	2000000c 	.word	0x2000000c

08001fe0 <_free_r>:
 8001fe0:	b538      	push	{r3, r4, r5, lr}
 8001fe2:	4605      	mov	r5, r0
 8001fe4:	2900      	cmp	r1, #0
 8001fe6:	d040      	beq.n	800206a <_free_r+0x8a>
 8001fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fec:	1f0c      	subs	r4, r1, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bfb8      	it	lt
 8001ff2:	18e4      	addlt	r4, r4, r3
 8001ff4:	f000 fec0 	bl	8002d78 <__malloc_lock>
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	; (800206c <_free_r+0x8c>)
 8001ffa:	6813      	ldr	r3, [r2, #0]
 8001ffc:	b933      	cbnz	r3, 800200c <_free_r+0x2c>
 8001ffe:	6063      	str	r3, [r4, #4]
 8002000:	6014      	str	r4, [r2, #0]
 8002002:	4628      	mov	r0, r5
 8002004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002008:	f000 bebc 	b.w	8002d84 <__malloc_unlock>
 800200c:	42a3      	cmp	r3, r4
 800200e:	d908      	bls.n	8002022 <_free_r+0x42>
 8002010:	6820      	ldr	r0, [r4, #0]
 8002012:	1821      	adds	r1, r4, r0
 8002014:	428b      	cmp	r3, r1
 8002016:	bf01      	itttt	eq
 8002018:	6819      	ldreq	r1, [r3, #0]
 800201a:	685b      	ldreq	r3, [r3, #4]
 800201c:	1809      	addeq	r1, r1, r0
 800201e:	6021      	streq	r1, [r4, #0]
 8002020:	e7ed      	b.n	8001ffe <_free_r+0x1e>
 8002022:	461a      	mov	r2, r3
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	b10b      	cbz	r3, 800202c <_free_r+0x4c>
 8002028:	42a3      	cmp	r3, r4
 800202a:	d9fa      	bls.n	8002022 <_free_r+0x42>
 800202c:	6811      	ldr	r1, [r2, #0]
 800202e:	1850      	adds	r0, r2, r1
 8002030:	42a0      	cmp	r0, r4
 8002032:	d10b      	bne.n	800204c <_free_r+0x6c>
 8002034:	6820      	ldr	r0, [r4, #0]
 8002036:	4401      	add	r1, r0
 8002038:	1850      	adds	r0, r2, r1
 800203a:	4283      	cmp	r3, r0
 800203c:	6011      	str	r1, [r2, #0]
 800203e:	d1e0      	bne.n	8002002 <_free_r+0x22>
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4401      	add	r1, r0
 8002046:	6011      	str	r1, [r2, #0]
 8002048:	6053      	str	r3, [r2, #4]
 800204a:	e7da      	b.n	8002002 <_free_r+0x22>
 800204c:	d902      	bls.n	8002054 <_free_r+0x74>
 800204e:	230c      	movs	r3, #12
 8002050:	602b      	str	r3, [r5, #0]
 8002052:	e7d6      	b.n	8002002 <_free_r+0x22>
 8002054:	6820      	ldr	r0, [r4, #0]
 8002056:	1821      	adds	r1, r4, r0
 8002058:	428b      	cmp	r3, r1
 800205a:	bf01      	itttt	eq
 800205c:	6819      	ldreq	r1, [r3, #0]
 800205e:	685b      	ldreq	r3, [r3, #4]
 8002060:	1809      	addeq	r1, r1, r0
 8002062:	6021      	streq	r1, [r4, #0]
 8002064:	6063      	str	r3, [r4, #4]
 8002066:	6054      	str	r4, [r2, #4]
 8002068:	e7cb      	b.n	8002002 <_free_r+0x22>
 800206a:	bd38      	pop	{r3, r4, r5, pc}
 800206c:	20000124 	.word	0x20000124

08002070 <sbrk_aligned>:
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	4e0e      	ldr	r6, [pc, #56]	; (80020ac <sbrk_aligned+0x3c>)
 8002074:	460c      	mov	r4, r1
 8002076:	6831      	ldr	r1, [r6, #0]
 8002078:	4605      	mov	r5, r0
 800207a:	b911      	cbnz	r1, 8002082 <sbrk_aligned+0x12>
 800207c:	f000 fb7a 	bl	8002774 <_sbrk_r>
 8002080:	6030      	str	r0, [r6, #0]
 8002082:	4621      	mov	r1, r4
 8002084:	4628      	mov	r0, r5
 8002086:	f000 fb75 	bl	8002774 <_sbrk_r>
 800208a:	1c43      	adds	r3, r0, #1
 800208c:	d00a      	beq.n	80020a4 <sbrk_aligned+0x34>
 800208e:	1cc4      	adds	r4, r0, #3
 8002090:	f024 0403 	bic.w	r4, r4, #3
 8002094:	42a0      	cmp	r0, r4
 8002096:	d007      	beq.n	80020a8 <sbrk_aligned+0x38>
 8002098:	1a21      	subs	r1, r4, r0
 800209a:	4628      	mov	r0, r5
 800209c:	f000 fb6a 	bl	8002774 <_sbrk_r>
 80020a0:	3001      	adds	r0, #1
 80020a2:	d101      	bne.n	80020a8 <sbrk_aligned+0x38>
 80020a4:	f04f 34ff 	mov.w	r4, #4294967295
 80020a8:	4620      	mov	r0, r4
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
 80020ac:	20000128 	.word	0x20000128

080020b0 <_malloc_r>:
 80020b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020b4:	1ccd      	adds	r5, r1, #3
 80020b6:	f025 0503 	bic.w	r5, r5, #3
 80020ba:	3508      	adds	r5, #8
 80020bc:	2d0c      	cmp	r5, #12
 80020be:	bf38      	it	cc
 80020c0:	250c      	movcc	r5, #12
 80020c2:	2d00      	cmp	r5, #0
 80020c4:	4607      	mov	r7, r0
 80020c6:	db01      	blt.n	80020cc <_malloc_r+0x1c>
 80020c8:	42a9      	cmp	r1, r5
 80020ca:	d905      	bls.n	80020d8 <_malloc_r+0x28>
 80020cc:	230c      	movs	r3, #12
 80020ce:	2600      	movs	r6, #0
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	4630      	mov	r0, r6
 80020d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020d8:	4e2e      	ldr	r6, [pc, #184]	; (8002194 <_malloc_r+0xe4>)
 80020da:	f000 fe4d 	bl	8002d78 <__malloc_lock>
 80020de:	6833      	ldr	r3, [r6, #0]
 80020e0:	461c      	mov	r4, r3
 80020e2:	bb34      	cbnz	r4, 8002132 <_malloc_r+0x82>
 80020e4:	4629      	mov	r1, r5
 80020e6:	4638      	mov	r0, r7
 80020e8:	f7ff ffc2 	bl	8002070 <sbrk_aligned>
 80020ec:	1c43      	adds	r3, r0, #1
 80020ee:	4604      	mov	r4, r0
 80020f0:	d14d      	bne.n	800218e <_malloc_r+0xde>
 80020f2:	6834      	ldr	r4, [r6, #0]
 80020f4:	4626      	mov	r6, r4
 80020f6:	2e00      	cmp	r6, #0
 80020f8:	d140      	bne.n	800217c <_malloc_r+0xcc>
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	4631      	mov	r1, r6
 80020fe:	4638      	mov	r0, r7
 8002100:	eb04 0803 	add.w	r8, r4, r3
 8002104:	f000 fb36 	bl	8002774 <_sbrk_r>
 8002108:	4580      	cmp	r8, r0
 800210a:	d13a      	bne.n	8002182 <_malloc_r+0xd2>
 800210c:	6821      	ldr	r1, [r4, #0]
 800210e:	3503      	adds	r5, #3
 8002110:	1a6d      	subs	r5, r5, r1
 8002112:	f025 0503 	bic.w	r5, r5, #3
 8002116:	3508      	adds	r5, #8
 8002118:	2d0c      	cmp	r5, #12
 800211a:	bf38      	it	cc
 800211c:	250c      	movcc	r5, #12
 800211e:	4638      	mov	r0, r7
 8002120:	4629      	mov	r1, r5
 8002122:	f7ff ffa5 	bl	8002070 <sbrk_aligned>
 8002126:	3001      	adds	r0, #1
 8002128:	d02b      	beq.n	8002182 <_malloc_r+0xd2>
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	442b      	add	r3, r5
 800212e:	6023      	str	r3, [r4, #0]
 8002130:	e00e      	b.n	8002150 <_malloc_r+0xa0>
 8002132:	6822      	ldr	r2, [r4, #0]
 8002134:	1b52      	subs	r2, r2, r5
 8002136:	d41e      	bmi.n	8002176 <_malloc_r+0xc6>
 8002138:	2a0b      	cmp	r2, #11
 800213a:	d916      	bls.n	800216a <_malloc_r+0xba>
 800213c:	1961      	adds	r1, r4, r5
 800213e:	42a3      	cmp	r3, r4
 8002140:	6025      	str	r5, [r4, #0]
 8002142:	bf18      	it	ne
 8002144:	6059      	strne	r1, [r3, #4]
 8002146:	6863      	ldr	r3, [r4, #4]
 8002148:	bf08      	it	eq
 800214a:	6031      	streq	r1, [r6, #0]
 800214c:	5162      	str	r2, [r4, r5]
 800214e:	604b      	str	r3, [r1, #4]
 8002150:	4638      	mov	r0, r7
 8002152:	f104 060b 	add.w	r6, r4, #11
 8002156:	f000 fe15 	bl	8002d84 <__malloc_unlock>
 800215a:	f026 0607 	bic.w	r6, r6, #7
 800215e:	1d23      	adds	r3, r4, #4
 8002160:	1af2      	subs	r2, r6, r3
 8002162:	d0b6      	beq.n	80020d2 <_malloc_r+0x22>
 8002164:	1b9b      	subs	r3, r3, r6
 8002166:	50a3      	str	r3, [r4, r2]
 8002168:	e7b3      	b.n	80020d2 <_malloc_r+0x22>
 800216a:	6862      	ldr	r2, [r4, #4]
 800216c:	42a3      	cmp	r3, r4
 800216e:	bf0c      	ite	eq
 8002170:	6032      	streq	r2, [r6, #0]
 8002172:	605a      	strne	r2, [r3, #4]
 8002174:	e7ec      	b.n	8002150 <_malloc_r+0xa0>
 8002176:	4623      	mov	r3, r4
 8002178:	6864      	ldr	r4, [r4, #4]
 800217a:	e7b2      	b.n	80020e2 <_malloc_r+0x32>
 800217c:	4634      	mov	r4, r6
 800217e:	6876      	ldr	r6, [r6, #4]
 8002180:	e7b9      	b.n	80020f6 <_malloc_r+0x46>
 8002182:	230c      	movs	r3, #12
 8002184:	4638      	mov	r0, r7
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	f000 fdfc 	bl	8002d84 <__malloc_unlock>
 800218c:	e7a1      	b.n	80020d2 <_malloc_r+0x22>
 800218e:	6025      	str	r5, [r4, #0]
 8002190:	e7de      	b.n	8002150 <_malloc_r+0xa0>
 8002192:	bf00      	nop
 8002194:	20000124 	.word	0x20000124

08002198 <__sfputc_r>:
 8002198:	6893      	ldr	r3, [r2, #8]
 800219a:	b410      	push	{r4}
 800219c:	3b01      	subs	r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	6093      	str	r3, [r2, #8]
 80021a2:	da07      	bge.n	80021b4 <__sfputc_r+0x1c>
 80021a4:	6994      	ldr	r4, [r2, #24]
 80021a6:	42a3      	cmp	r3, r4
 80021a8:	db01      	blt.n	80021ae <__sfputc_r+0x16>
 80021aa:	290a      	cmp	r1, #10
 80021ac:	d102      	bne.n	80021b4 <__sfputc_r+0x1c>
 80021ae:	bc10      	pop	{r4}
 80021b0:	f000 baf0 	b.w	8002794 <__swbuf_r>
 80021b4:	6813      	ldr	r3, [r2, #0]
 80021b6:	1c58      	adds	r0, r3, #1
 80021b8:	6010      	str	r0, [r2, #0]
 80021ba:	7019      	strb	r1, [r3, #0]
 80021bc:	4608      	mov	r0, r1
 80021be:	bc10      	pop	{r4}
 80021c0:	4770      	bx	lr

080021c2 <__sfputs_r>:
 80021c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c4:	4606      	mov	r6, r0
 80021c6:	460f      	mov	r7, r1
 80021c8:	4614      	mov	r4, r2
 80021ca:	18d5      	adds	r5, r2, r3
 80021cc:	42ac      	cmp	r4, r5
 80021ce:	d101      	bne.n	80021d4 <__sfputs_r+0x12>
 80021d0:	2000      	movs	r0, #0
 80021d2:	e007      	b.n	80021e4 <__sfputs_r+0x22>
 80021d4:	463a      	mov	r2, r7
 80021d6:	4630      	mov	r0, r6
 80021d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021dc:	f7ff ffdc 	bl	8002198 <__sfputc_r>
 80021e0:	1c43      	adds	r3, r0, #1
 80021e2:	d1f3      	bne.n	80021cc <__sfputs_r+0xa>
 80021e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021e8 <_vfiprintf_r>:
 80021e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ec:	460d      	mov	r5, r1
 80021ee:	4614      	mov	r4, r2
 80021f0:	4698      	mov	r8, r3
 80021f2:	4606      	mov	r6, r0
 80021f4:	b09d      	sub	sp, #116	; 0x74
 80021f6:	b118      	cbz	r0, 8002200 <_vfiprintf_r+0x18>
 80021f8:	6983      	ldr	r3, [r0, #24]
 80021fa:	b90b      	cbnz	r3, 8002200 <_vfiprintf_r+0x18>
 80021fc:	f000 fca8 	bl	8002b50 <__sinit>
 8002200:	4b89      	ldr	r3, [pc, #548]	; (8002428 <_vfiprintf_r+0x240>)
 8002202:	429d      	cmp	r5, r3
 8002204:	d11b      	bne.n	800223e <_vfiprintf_r+0x56>
 8002206:	6875      	ldr	r5, [r6, #4]
 8002208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800220a:	07d9      	lsls	r1, r3, #31
 800220c:	d405      	bmi.n	800221a <_vfiprintf_r+0x32>
 800220e:	89ab      	ldrh	r3, [r5, #12]
 8002210:	059a      	lsls	r2, r3, #22
 8002212:	d402      	bmi.n	800221a <_vfiprintf_r+0x32>
 8002214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002216:	f000 fd39 	bl	8002c8c <__retarget_lock_acquire_recursive>
 800221a:	89ab      	ldrh	r3, [r5, #12]
 800221c:	071b      	lsls	r3, r3, #28
 800221e:	d501      	bpl.n	8002224 <_vfiprintf_r+0x3c>
 8002220:	692b      	ldr	r3, [r5, #16]
 8002222:	b9eb      	cbnz	r3, 8002260 <_vfiprintf_r+0x78>
 8002224:	4629      	mov	r1, r5
 8002226:	4630      	mov	r0, r6
 8002228:	f000 fb06 	bl	8002838 <__swsetup_r>
 800222c:	b1c0      	cbz	r0, 8002260 <_vfiprintf_r+0x78>
 800222e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002230:	07dc      	lsls	r4, r3, #31
 8002232:	d50e      	bpl.n	8002252 <_vfiprintf_r+0x6a>
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	b01d      	add	sp, #116	; 0x74
 800223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800223e:	4b7b      	ldr	r3, [pc, #492]	; (800242c <_vfiprintf_r+0x244>)
 8002240:	429d      	cmp	r5, r3
 8002242:	d101      	bne.n	8002248 <_vfiprintf_r+0x60>
 8002244:	68b5      	ldr	r5, [r6, #8]
 8002246:	e7df      	b.n	8002208 <_vfiprintf_r+0x20>
 8002248:	4b79      	ldr	r3, [pc, #484]	; (8002430 <_vfiprintf_r+0x248>)
 800224a:	429d      	cmp	r5, r3
 800224c:	bf08      	it	eq
 800224e:	68f5      	ldreq	r5, [r6, #12]
 8002250:	e7da      	b.n	8002208 <_vfiprintf_r+0x20>
 8002252:	89ab      	ldrh	r3, [r5, #12]
 8002254:	0598      	lsls	r0, r3, #22
 8002256:	d4ed      	bmi.n	8002234 <_vfiprintf_r+0x4c>
 8002258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800225a:	f000 fd18 	bl	8002c8e <__retarget_lock_release_recursive>
 800225e:	e7e9      	b.n	8002234 <_vfiprintf_r+0x4c>
 8002260:	2300      	movs	r3, #0
 8002262:	9309      	str	r3, [sp, #36]	; 0x24
 8002264:	2320      	movs	r3, #32
 8002266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800226a:	2330      	movs	r3, #48	; 0x30
 800226c:	f04f 0901 	mov.w	r9, #1
 8002270:	f8cd 800c 	str.w	r8, [sp, #12]
 8002274:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002434 <_vfiprintf_r+0x24c>
 8002278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800227c:	4623      	mov	r3, r4
 800227e:	469a      	mov	sl, r3
 8002280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002284:	b10a      	cbz	r2, 800228a <_vfiprintf_r+0xa2>
 8002286:	2a25      	cmp	r2, #37	; 0x25
 8002288:	d1f9      	bne.n	800227e <_vfiprintf_r+0x96>
 800228a:	ebba 0b04 	subs.w	fp, sl, r4
 800228e:	d00b      	beq.n	80022a8 <_vfiprintf_r+0xc0>
 8002290:	465b      	mov	r3, fp
 8002292:	4622      	mov	r2, r4
 8002294:	4629      	mov	r1, r5
 8002296:	4630      	mov	r0, r6
 8002298:	f7ff ff93 	bl	80021c2 <__sfputs_r>
 800229c:	3001      	adds	r0, #1
 800229e:	f000 80aa 	beq.w	80023f6 <_vfiprintf_r+0x20e>
 80022a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022a4:	445a      	add	r2, fp
 80022a6:	9209      	str	r2, [sp, #36]	; 0x24
 80022a8:	f89a 3000 	ldrb.w	r3, [sl]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80a2 	beq.w	80023f6 <_vfiprintf_r+0x20e>
 80022b2:	2300      	movs	r3, #0
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022bc:	f10a 0a01 	add.w	sl, sl, #1
 80022c0:	9304      	str	r3, [sp, #16]
 80022c2:	9307      	str	r3, [sp, #28]
 80022c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022c8:	931a      	str	r3, [sp, #104]	; 0x68
 80022ca:	4654      	mov	r4, sl
 80022cc:	2205      	movs	r2, #5
 80022ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022d2:	4858      	ldr	r0, [pc, #352]	; (8002434 <_vfiprintf_r+0x24c>)
 80022d4:	f000 fd42 	bl	8002d5c <memchr>
 80022d8:	9a04      	ldr	r2, [sp, #16]
 80022da:	b9d8      	cbnz	r0, 8002314 <_vfiprintf_r+0x12c>
 80022dc:	06d1      	lsls	r1, r2, #27
 80022de:	bf44      	itt	mi
 80022e0:	2320      	movmi	r3, #32
 80022e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022e6:	0713      	lsls	r3, r2, #28
 80022e8:	bf44      	itt	mi
 80022ea:	232b      	movmi	r3, #43	; 0x2b
 80022ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022f0:	f89a 3000 	ldrb.w	r3, [sl]
 80022f4:	2b2a      	cmp	r3, #42	; 0x2a
 80022f6:	d015      	beq.n	8002324 <_vfiprintf_r+0x13c>
 80022f8:	4654      	mov	r4, sl
 80022fa:	2000      	movs	r0, #0
 80022fc:	f04f 0c0a 	mov.w	ip, #10
 8002300:	9a07      	ldr	r2, [sp, #28]
 8002302:	4621      	mov	r1, r4
 8002304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002308:	3b30      	subs	r3, #48	; 0x30
 800230a:	2b09      	cmp	r3, #9
 800230c:	d94e      	bls.n	80023ac <_vfiprintf_r+0x1c4>
 800230e:	b1b0      	cbz	r0, 800233e <_vfiprintf_r+0x156>
 8002310:	9207      	str	r2, [sp, #28]
 8002312:	e014      	b.n	800233e <_vfiprintf_r+0x156>
 8002314:	eba0 0308 	sub.w	r3, r0, r8
 8002318:	fa09 f303 	lsl.w	r3, r9, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	46a2      	mov	sl, r4
 8002320:	9304      	str	r3, [sp, #16]
 8002322:	e7d2      	b.n	80022ca <_vfiprintf_r+0xe2>
 8002324:	9b03      	ldr	r3, [sp, #12]
 8002326:	1d19      	adds	r1, r3, #4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	9103      	str	r1, [sp, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	bfbb      	ittet	lt
 8002330:	425b      	neglt	r3, r3
 8002332:	f042 0202 	orrlt.w	r2, r2, #2
 8002336:	9307      	strge	r3, [sp, #28]
 8002338:	9307      	strlt	r3, [sp, #28]
 800233a:	bfb8      	it	lt
 800233c:	9204      	strlt	r2, [sp, #16]
 800233e:	7823      	ldrb	r3, [r4, #0]
 8002340:	2b2e      	cmp	r3, #46	; 0x2e
 8002342:	d10c      	bne.n	800235e <_vfiprintf_r+0x176>
 8002344:	7863      	ldrb	r3, [r4, #1]
 8002346:	2b2a      	cmp	r3, #42	; 0x2a
 8002348:	d135      	bne.n	80023b6 <_vfiprintf_r+0x1ce>
 800234a:	9b03      	ldr	r3, [sp, #12]
 800234c:	3402      	adds	r4, #2
 800234e:	1d1a      	adds	r2, r3, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	9203      	str	r2, [sp, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	bfb8      	it	lt
 8002358:	f04f 33ff 	movlt.w	r3, #4294967295
 800235c:	9305      	str	r3, [sp, #20]
 800235e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002438 <_vfiprintf_r+0x250>
 8002362:	2203      	movs	r2, #3
 8002364:	4650      	mov	r0, sl
 8002366:	7821      	ldrb	r1, [r4, #0]
 8002368:	f000 fcf8 	bl	8002d5c <memchr>
 800236c:	b140      	cbz	r0, 8002380 <_vfiprintf_r+0x198>
 800236e:	2340      	movs	r3, #64	; 0x40
 8002370:	eba0 000a 	sub.w	r0, r0, sl
 8002374:	fa03 f000 	lsl.w	r0, r3, r0
 8002378:	9b04      	ldr	r3, [sp, #16]
 800237a:	3401      	adds	r4, #1
 800237c:	4303      	orrs	r3, r0
 800237e:	9304      	str	r3, [sp, #16]
 8002380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002384:	2206      	movs	r2, #6
 8002386:	482d      	ldr	r0, [pc, #180]	; (800243c <_vfiprintf_r+0x254>)
 8002388:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800238c:	f000 fce6 	bl	8002d5c <memchr>
 8002390:	2800      	cmp	r0, #0
 8002392:	d03f      	beq.n	8002414 <_vfiprintf_r+0x22c>
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <_vfiprintf_r+0x258>)
 8002396:	bb1b      	cbnz	r3, 80023e0 <_vfiprintf_r+0x1f8>
 8002398:	9b03      	ldr	r3, [sp, #12]
 800239a:	3307      	adds	r3, #7
 800239c:	f023 0307 	bic.w	r3, r3, #7
 80023a0:	3308      	adds	r3, #8
 80023a2:	9303      	str	r3, [sp, #12]
 80023a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023a6:	443b      	add	r3, r7
 80023a8:	9309      	str	r3, [sp, #36]	; 0x24
 80023aa:	e767      	b.n	800227c <_vfiprintf_r+0x94>
 80023ac:	460c      	mov	r4, r1
 80023ae:	2001      	movs	r0, #1
 80023b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80023b4:	e7a5      	b.n	8002302 <_vfiprintf_r+0x11a>
 80023b6:	2300      	movs	r3, #0
 80023b8:	f04f 0c0a 	mov.w	ip, #10
 80023bc:	4619      	mov	r1, r3
 80023be:	3401      	adds	r4, #1
 80023c0:	9305      	str	r3, [sp, #20]
 80023c2:	4620      	mov	r0, r4
 80023c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023c8:	3a30      	subs	r2, #48	; 0x30
 80023ca:	2a09      	cmp	r2, #9
 80023cc:	d903      	bls.n	80023d6 <_vfiprintf_r+0x1ee>
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0c5      	beq.n	800235e <_vfiprintf_r+0x176>
 80023d2:	9105      	str	r1, [sp, #20]
 80023d4:	e7c3      	b.n	800235e <_vfiprintf_r+0x176>
 80023d6:	4604      	mov	r4, r0
 80023d8:	2301      	movs	r3, #1
 80023da:	fb0c 2101 	mla	r1, ip, r1, r2
 80023de:	e7f0      	b.n	80023c2 <_vfiprintf_r+0x1da>
 80023e0:	ab03      	add	r3, sp, #12
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	462a      	mov	r2, r5
 80023e6:	4630      	mov	r0, r6
 80023e8:	4b16      	ldr	r3, [pc, #88]	; (8002444 <_vfiprintf_r+0x25c>)
 80023ea:	a904      	add	r1, sp, #16
 80023ec:	f3af 8000 	nop.w
 80023f0:	4607      	mov	r7, r0
 80023f2:	1c78      	adds	r0, r7, #1
 80023f4:	d1d6      	bne.n	80023a4 <_vfiprintf_r+0x1bc>
 80023f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023f8:	07d9      	lsls	r1, r3, #31
 80023fa:	d405      	bmi.n	8002408 <_vfiprintf_r+0x220>
 80023fc:	89ab      	ldrh	r3, [r5, #12]
 80023fe:	059a      	lsls	r2, r3, #22
 8002400:	d402      	bmi.n	8002408 <_vfiprintf_r+0x220>
 8002402:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002404:	f000 fc43 	bl	8002c8e <__retarget_lock_release_recursive>
 8002408:	89ab      	ldrh	r3, [r5, #12]
 800240a:	065b      	lsls	r3, r3, #25
 800240c:	f53f af12 	bmi.w	8002234 <_vfiprintf_r+0x4c>
 8002410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002412:	e711      	b.n	8002238 <_vfiprintf_r+0x50>
 8002414:	ab03      	add	r3, sp, #12
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	462a      	mov	r2, r5
 800241a:	4630      	mov	r0, r6
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <_vfiprintf_r+0x25c>)
 800241e:	a904      	add	r1, sp, #16
 8002420:	f000 f882 	bl	8002528 <_printf_i>
 8002424:	e7e4      	b.n	80023f0 <_vfiprintf_r+0x208>
 8002426:	bf00      	nop
 8002428:	080030b0 	.word	0x080030b0
 800242c:	080030d0 	.word	0x080030d0
 8002430:	08003090 	.word	0x08003090
 8002434:	0800305a 	.word	0x0800305a
 8002438:	08003060 	.word	0x08003060
 800243c:	08003064 	.word	0x08003064
 8002440:	00000000 	.word	0x00000000
 8002444:	080021c3 	.word	0x080021c3

08002448 <_printf_common>:
 8002448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800244c:	4616      	mov	r6, r2
 800244e:	4699      	mov	r9, r3
 8002450:	688a      	ldr	r2, [r1, #8]
 8002452:	690b      	ldr	r3, [r1, #16]
 8002454:	4607      	mov	r7, r0
 8002456:	4293      	cmp	r3, r2
 8002458:	bfb8      	it	lt
 800245a:	4613      	movlt	r3, r2
 800245c:	6033      	str	r3, [r6, #0]
 800245e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002462:	460c      	mov	r4, r1
 8002464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002468:	b10a      	cbz	r2, 800246e <_printf_common+0x26>
 800246a:	3301      	adds	r3, #1
 800246c:	6033      	str	r3, [r6, #0]
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	0699      	lsls	r1, r3, #26
 8002472:	bf42      	ittt	mi
 8002474:	6833      	ldrmi	r3, [r6, #0]
 8002476:	3302      	addmi	r3, #2
 8002478:	6033      	strmi	r3, [r6, #0]
 800247a:	6825      	ldr	r5, [r4, #0]
 800247c:	f015 0506 	ands.w	r5, r5, #6
 8002480:	d106      	bne.n	8002490 <_printf_common+0x48>
 8002482:	f104 0a19 	add.w	sl, r4, #25
 8002486:	68e3      	ldr	r3, [r4, #12]
 8002488:	6832      	ldr	r2, [r6, #0]
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	42ab      	cmp	r3, r5
 800248e:	dc28      	bgt.n	80024e2 <_printf_common+0x9a>
 8002490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002494:	1e13      	subs	r3, r2, #0
 8002496:	6822      	ldr	r2, [r4, #0]
 8002498:	bf18      	it	ne
 800249a:	2301      	movne	r3, #1
 800249c:	0692      	lsls	r2, r2, #26
 800249e:	d42d      	bmi.n	80024fc <_printf_common+0xb4>
 80024a0:	4649      	mov	r1, r9
 80024a2:	4638      	mov	r0, r7
 80024a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024a8:	47c0      	blx	r8
 80024aa:	3001      	adds	r0, #1
 80024ac:	d020      	beq.n	80024f0 <_printf_common+0xa8>
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	68e5      	ldr	r5, [r4, #12]
 80024b2:	f003 0306 	and.w	r3, r3, #6
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf18      	it	ne
 80024ba:	2500      	movne	r5, #0
 80024bc:	6832      	ldr	r2, [r6, #0]
 80024be:	f04f 0600 	mov.w	r6, #0
 80024c2:	68a3      	ldr	r3, [r4, #8]
 80024c4:	bf08      	it	eq
 80024c6:	1aad      	subeq	r5, r5, r2
 80024c8:	6922      	ldr	r2, [r4, #16]
 80024ca:	bf08      	it	eq
 80024cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024d0:	4293      	cmp	r3, r2
 80024d2:	bfc4      	itt	gt
 80024d4:	1a9b      	subgt	r3, r3, r2
 80024d6:	18ed      	addgt	r5, r5, r3
 80024d8:	341a      	adds	r4, #26
 80024da:	42b5      	cmp	r5, r6
 80024dc:	d11a      	bne.n	8002514 <_printf_common+0xcc>
 80024de:	2000      	movs	r0, #0
 80024e0:	e008      	b.n	80024f4 <_printf_common+0xac>
 80024e2:	2301      	movs	r3, #1
 80024e4:	4652      	mov	r2, sl
 80024e6:	4649      	mov	r1, r9
 80024e8:	4638      	mov	r0, r7
 80024ea:	47c0      	blx	r8
 80024ec:	3001      	adds	r0, #1
 80024ee:	d103      	bne.n	80024f8 <_printf_common+0xb0>
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f8:	3501      	adds	r5, #1
 80024fa:	e7c4      	b.n	8002486 <_printf_common+0x3e>
 80024fc:	2030      	movs	r0, #48	; 0x30
 80024fe:	18e1      	adds	r1, r4, r3
 8002500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800250a:	4422      	add	r2, r4
 800250c:	3302      	adds	r3, #2
 800250e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002512:	e7c5      	b.n	80024a0 <_printf_common+0x58>
 8002514:	2301      	movs	r3, #1
 8002516:	4622      	mov	r2, r4
 8002518:	4649      	mov	r1, r9
 800251a:	4638      	mov	r0, r7
 800251c:	47c0      	blx	r8
 800251e:	3001      	adds	r0, #1
 8002520:	d0e6      	beq.n	80024f0 <_printf_common+0xa8>
 8002522:	3601      	adds	r6, #1
 8002524:	e7d9      	b.n	80024da <_printf_common+0x92>
	...

08002528 <_printf_i>:
 8002528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800252c:	7e0f      	ldrb	r7, [r1, #24]
 800252e:	4691      	mov	r9, r2
 8002530:	2f78      	cmp	r7, #120	; 0x78
 8002532:	4680      	mov	r8, r0
 8002534:	460c      	mov	r4, r1
 8002536:	469a      	mov	sl, r3
 8002538:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800253a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800253e:	d807      	bhi.n	8002550 <_printf_i+0x28>
 8002540:	2f62      	cmp	r7, #98	; 0x62
 8002542:	d80a      	bhi.n	800255a <_printf_i+0x32>
 8002544:	2f00      	cmp	r7, #0
 8002546:	f000 80d9 	beq.w	80026fc <_printf_i+0x1d4>
 800254a:	2f58      	cmp	r7, #88	; 0x58
 800254c:	f000 80a4 	beq.w	8002698 <_printf_i+0x170>
 8002550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002558:	e03a      	b.n	80025d0 <_printf_i+0xa8>
 800255a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800255e:	2b15      	cmp	r3, #21
 8002560:	d8f6      	bhi.n	8002550 <_printf_i+0x28>
 8002562:	a101      	add	r1, pc, #4	; (adr r1, 8002568 <_printf_i+0x40>)
 8002564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002568:	080025c1 	.word	0x080025c1
 800256c:	080025d5 	.word	0x080025d5
 8002570:	08002551 	.word	0x08002551
 8002574:	08002551 	.word	0x08002551
 8002578:	08002551 	.word	0x08002551
 800257c:	08002551 	.word	0x08002551
 8002580:	080025d5 	.word	0x080025d5
 8002584:	08002551 	.word	0x08002551
 8002588:	08002551 	.word	0x08002551
 800258c:	08002551 	.word	0x08002551
 8002590:	08002551 	.word	0x08002551
 8002594:	080026e3 	.word	0x080026e3
 8002598:	08002605 	.word	0x08002605
 800259c:	080026c5 	.word	0x080026c5
 80025a0:	08002551 	.word	0x08002551
 80025a4:	08002551 	.word	0x08002551
 80025a8:	08002705 	.word	0x08002705
 80025ac:	08002551 	.word	0x08002551
 80025b0:	08002605 	.word	0x08002605
 80025b4:	08002551 	.word	0x08002551
 80025b8:	08002551 	.word	0x08002551
 80025bc:	080026cd 	.word	0x080026cd
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	1d1a      	adds	r2, r3, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	602a      	str	r2, [r5, #0]
 80025c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0a4      	b.n	800271e <_printf_i+0x1f6>
 80025d4:	6820      	ldr	r0, [r4, #0]
 80025d6:	6829      	ldr	r1, [r5, #0]
 80025d8:	0606      	lsls	r6, r0, #24
 80025da:	f101 0304 	add.w	r3, r1, #4
 80025de:	d50a      	bpl.n	80025f6 <_printf_i+0xce>
 80025e0:	680e      	ldr	r6, [r1, #0]
 80025e2:	602b      	str	r3, [r5, #0]
 80025e4:	2e00      	cmp	r6, #0
 80025e6:	da03      	bge.n	80025f0 <_printf_i+0xc8>
 80025e8:	232d      	movs	r3, #45	; 0x2d
 80025ea:	4276      	negs	r6, r6
 80025ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025f0:	230a      	movs	r3, #10
 80025f2:	485e      	ldr	r0, [pc, #376]	; (800276c <_printf_i+0x244>)
 80025f4:	e019      	b.n	800262a <_printf_i+0x102>
 80025f6:	680e      	ldr	r6, [r1, #0]
 80025f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025fc:	602b      	str	r3, [r5, #0]
 80025fe:	bf18      	it	ne
 8002600:	b236      	sxthne	r6, r6
 8002602:	e7ef      	b.n	80025e4 <_printf_i+0xbc>
 8002604:	682b      	ldr	r3, [r5, #0]
 8002606:	6820      	ldr	r0, [r4, #0]
 8002608:	1d19      	adds	r1, r3, #4
 800260a:	6029      	str	r1, [r5, #0]
 800260c:	0601      	lsls	r1, r0, #24
 800260e:	d501      	bpl.n	8002614 <_printf_i+0xec>
 8002610:	681e      	ldr	r6, [r3, #0]
 8002612:	e002      	b.n	800261a <_printf_i+0xf2>
 8002614:	0646      	lsls	r6, r0, #25
 8002616:	d5fb      	bpl.n	8002610 <_printf_i+0xe8>
 8002618:	881e      	ldrh	r6, [r3, #0]
 800261a:	2f6f      	cmp	r7, #111	; 0x6f
 800261c:	bf0c      	ite	eq
 800261e:	2308      	moveq	r3, #8
 8002620:	230a      	movne	r3, #10
 8002622:	4852      	ldr	r0, [pc, #328]	; (800276c <_printf_i+0x244>)
 8002624:	2100      	movs	r1, #0
 8002626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800262a:	6865      	ldr	r5, [r4, #4]
 800262c:	2d00      	cmp	r5, #0
 800262e:	bfa8      	it	ge
 8002630:	6821      	ldrge	r1, [r4, #0]
 8002632:	60a5      	str	r5, [r4, #8]
 8002634:	bfa4      	itt	ge
 8002636:	f021 0104 	bicge.w	r1, r1, #4
 800263a:	6021      	strge	r1, [r4, #0]
 800263c:	b90e      	cbnz	r6, 8002642 <_printf_i+0x11a>
 800263e:	2d00      	cmp	r5, #0
 8002640:	d04d      	beq.n	80026de <_printf_i+0x1b6>
 8002642:	4615      	mov	r5, r2
 8002644:	fbb6 f1f3 	udiv	r1, r6, r3
 8002648:	fb03 6711 	mls	r7, r3, r1, r6
 800264c:	5dc7      	ldrb	r7, [r0, r7]
 800264e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002652:	4637      	mov	r7, r6
 8002654:	42bb      	cmp	r3, r7
 8002656:	460e      	mov	r6, r1
 8002658:	d9f4      	bls.n	8002644 <_printf_i+0x11c>
 800265a:	2b08      	cmp	r3, #8
 800265c:	d10b      	bne.n	8002676 <_printf_i+0x14e>
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	07de      	lsls	r6, r3, #31
 8002662:	d508      	bpl.n	8002676 <_printf_i+0x14e>
 8002664:	6923      	ldr	r3, [r4, #16]
 8002666:	6861      	ldr	r1, [r4, #4]
 8002668:	4299      	cmp	r1, r3
 800266a:	bfde      	ittt	le
 800266c:	2330      	movle	r3, #48	; 0x30
 800266e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002672:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002676:	1b52      	subs	r2, r2, r5
 8002678:	6122      	str	r2, [r4, #16]
 800267a:	464b      	mov	r3, r9
 800267c:	4621      	mov	r1, r4
 800267e:	4640      	mov	r0, r8
 8002680:	f8cd a000 	str.w	sl, [sp]
 8002684:	aa03      	add	r2, sp, #12
 8002686:	f7ff fedf 	bl	8002448 <_printf_common>
 800268a:	3001      	adds	r0, #1
 800268c:	d14c      	bne.n	8002728 <_printf_i+0x200>
 800268e:	f04f 30ff 	mov.w	r0, #4294967295
 8002692:	b004      	add	sp, #16
 8002694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002698:	4834      	ldr	r0, [pc, #208]	; (800276c <_printf_i+0x244>)
 800269a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800269e:	6829      	ldr	r1, [r5, #0]
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80026a6:	6029      	str	r1, [r5, #0]
 80026a8:	061d      	lsls	r5, r3, #24
 80026aa:	d514      	bpl.n	80026d6 <_printf_i+0x1ae>
 80026ac:	07df      	lsls	r7, r3, #31
 80026ae:	bf44      	itt	mi
 80026b0:	f043 0320 	orrmi.w	r3, r3, #32
 80026b4:	6023      	strmi	r3, [r4, #0]
 80026b6:	b91e      	cbnz	r6, 80026c0 <_printf_i+0x198>
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	f023 0320 	bic.w	r3, r3, #32
 80026be:	6023      	str	r3, [r4, #0]
 80026c0:	2310      	movs	r3, #16
 80026c2:	e7af      	b.n	8002624 <_printf_i+0xfc>
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	f043 0320 	orr.w	r3, r3, #32
 80026ca:	6023      	str	r3, [r4, #0]
 80026cc:	2378      	movs	r3, #120	; 0x78
 80026ce:	4828      	ldr	r0, [pc, #160]	; (8002770 <_printf_i+0x248>)
 80026d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026d4:	e7e3      	b.n	800269e <_printf_i+0x176>
 80026d6:	0659      	lsls	r1, r3, #25
 80026d8:	bf48      	it	mi
 80026da:	b2b6      	uxthmi	r6, r6
 80026dc:	e7e6      	b.n	80026ac <_printf_i+0x184>
 80026de:	4615      	mov	r5, r2
 80026e0:	e7bb      	b.n	800265a <_printf_i+0x132>
 80026e2:	682b      	ldr	r3, [r5, #0]
 80026e4:	6826      	ldr	r6, [r4, #0]
 80026e6:	1d18      	adds	r0, r3, #4
 80026e8:	6961      	ldr	r1, [r4, #20]
 80026ea:	6028      	str	r0, [r5, #0]
 80026ec:	0635      	lsls	r5, r6, #24
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	d501      	bpl.n	80026f6 <_printf_i+0x1ce>
 80026f2:	6019      	str	r1, [r3, #0]
 80026f4:	e002      	b.n	80026fc <_printf_i+0x1d4>
 80026f6:	0670      	lsls	r0, r6, #25
 80026f8:	d5fb      	bpl.n	80026f2 <_printf_i+0x1ca>
 80026fa:	8019      	strh	r1, [r3, #0]
 80026fc:	2300      	movs	r3, #0
 80026fe:	4615      	mov	r5, r2
 8002700:	6123      	str	r3, [r4, #16]
 8002702:	e7ba      	b.n	800267a <_printf_i+0x152>
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	2100      	movs	r1, #0
 8002708:	1d1a      	adds	r2, r3, #4
 800270a:	602a      	str	r2, [r5, #0]
 800270c:	681d      	ldr	r5, [r3, #0]
 800270e:	6862      	ldr	r2, [r4, #4]
 8002710:	4628      	mov	r0, r5
 8002712:	f000 fb23 	bl	8002d5c <memchr>
 8002716:	b108      	cbz	r0, 800271c <_printf_i+0x1f4>
 8002718:	1b40      	subs	r0, r0, r5
 800271a:	6060      	str	r0, [r4, #4]
 800271c:	6863      	ldr	r3, [r4, #4]
 800271e:	6123      	str	r3, [r4, #16]
 8002720:	2300      	movs	r3, #0
 8002722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002726:	e7a8      	b.n	800267a <_printf_i+0x152>
 8002728:	462a      	mov	r2, r5
 800272a:	4649      	mov	r1, r9
 800272c:	4640      	mov	r0, r8
 800272e:	6923      	ldr	r3, [r4, #16]
 8002730:	47d0      	blx	sl
 8002732:	3001      	adds	r0, #1
 8002734:	d0ab      	beq.n	800268e <_printf_i+0x166>
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	079b      	lsls	r3, r3, #30
 800273a:	d413      	bmi.n	8002764 <_printf_i+0x23c>
 800273c:	68e0      	ldr	r0, [r4, #12]
 800273e:	9b03      	ldr	r3, [sp, #12]
 8002740:	4298      	cmp	r0, r3
 8002742:	bfb8      	it	lt
 8002744:	4618      	movlt	r0, r3
 8002746:	e7a4      	b.n	8002692 <_printf_i+0x16a>
 8002748:	2301      	movs	r3, #1
 800274a:	4632      	mov	r2, r6
 800274c:	4649      	mov	r1, r9
 800274e:	4640      	mov	r0, r8
 8002750:	47d0      	blx	sl
 8002752:	3001      	adds	r0, #1
 8002754:	d09b      	beq.n	800268e <_printf_i+0x166>
 8002756:	3501      	adds	r5, #1
 8002758:	68e3      	ldr	r3, [r4, #12]
 800275a:	9903      	ldr	r1, [sp, #12]
 800275c:	1a5b      	subs	r3, r3, r1
 800275e:	42ab      	cmp	r3, r5
 8002760:	dcf2      	bgt.n	8002748 <_printf_i+0x220>
 8002762:	e7eb      	b.n	800273c <_printf_i+0x214>
 8002764:	2500      	movs	r5, #0
 8002766:	f104 0619 	add.w	r6, r4, #25
 800276a:	e7f5      	b.n	8002758 <_printf_i+0x230>
 800276c:	0800306b 	.word	0x0800306b
 8002770:	0800307c 	.word	0x0800307c

08002774 <_sbrk_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	2300      	movs	r3, #0
 8002778:	4d05      	ldr	r5, [pc, #20]	; (8002790 <_sbrk_r+0x1c>)
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	602b      	str	r3, [r5, #0]
 8002780:	f7fd ffaa 	bl	80006d8 <_sbrk>
 8002784:	1c43      	adds	r3, r0, #1
 8002786:	d102      	bne.n	800278e <_sbrk_r+0x1a>
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	b103      	cbz	r3, 800278e <_sbrk_r+0x1a>
 800278c:	6023      	str	r3, [r4, #0]
 800278e:	bd38      	pop	{r3, r4, r5, pc}
 8002790:	20000130 	.word	0x20000130

08002794 <__swbuf_r>:
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	460e      	mov	r6, r1
 8002798:	4614      	mov	r4, r2
 800279a:	4605      	mov	r5, r0
 800279c:	b118      	cbz	r0, 80027a6 <__swbuf_r+0x12>
 800279e:	6983      	ldr	r3, [r0, #24]
 80027a0:	b90b      	cbnz	r3, 80027a6 <__swbuf_r+0x12>
 80027a2:	f000 f9d5 	bl	8002b50 <__sinit>
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <__swbuf_r+0x98>)
 80027a8:	429c      	cmp	r4, r3
 80027aa:	d12b      	bne.n	8002804 <__swbuf_r+0x70>
 80027ac:	686c      	ldr	r4, [r5, #4]
 80027ae:	69a3      	ldr	r3, [r4, #24]
 80027b0:	60a3      	str	r3, [r4, #8]
 80027b2:	89a3      	ldrh	r3, [r4, #12]
 80027b4:	071a      	lsls	r2, r3, #28
 80027b6:	d52f      	bpl.n	8002818 <__swbuf_r+0x84>
 80027b8:	6923      	ldr	r3, [r4, #16]
 80027ba:	b36b      	cbz	r3, 8002818 <__swbuf_r+0x84>
 80027bc:	6923      	ldr	r3, [r4, #16]
 80027be:	6820      	ldr	r0, [r4, #0]
 80027c0:	b2f6      	uxtb	r6, r6
 80027c2:	1ac0      	subs	r0, r0, r3
 80027c4:	6963      	ldr	r3, [r4, #20]
 80027c6:	4637      	mov	r7, r6
 80027c8:	4283      	cmp	r3, r0
 80027ca:	dc04      	bgt.n	80027d6 <__swbuf_r+0x42>
 80027cc:	4621      	mov	r1, r4
 80027ce:	4628      	mov	r0, r5
 80027d0:	f000 f92a 	bl	8002a28 <_fflush_r>
 80027d4:	bb30      	cbnz	r0, 8002824 <__swbuf_r+0x90>
 80027d6:	68a3      	ldr	r3, [r4, #8]
 80027d8:	3001      	adds	r0, #1
 80027da:	3b01      	subs	r3, #1
 80027dc:	60a3      	str	r3, [r4, #8]
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	6022      	str	r2, [r4, #0]
 80027e4:	701e      	strb	r6, [r3, #0]
 80027e6:	6963      	ldr	r3, [r4, #20]
 80027e8:	4283      	cmp	r3, r0
 80027ea:	d004      	beq.n	80027f6 <__swbuf_r+0x62>
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	07db      	lsls	r3, r3, #31
 80027f0:	d506      	bpl.n	8002800 <__swbuf_r+0x6c>
 80027f2:	2e0a      	cmp	r6, #10
 80027f4:	d104      	bne.n	8002800 <__swbuf_r+0x6c>
 80027f6:	4621      	mov	r1, r4
 80027f8:	4628      	mov	r0, r5
 80027fa:	f000 f915 	bl	8002a28 <_fflush_r>
 80027fe:	b988      	cbnz	r0, 8002824 <__swbuf_r+0x90>
 8002800:	4638      	mov	r0, r7
 8002802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <__swbuf_r+0x9c>)
 8002806:	429c      	cmp	r4, r3
 8002808:	d101      	bne.n	800280e <__swbuf_r+0x7a>
 800280a:	68ac      	ldr	r4, [r5, #8]
 800280c:	e7cf      	b.n	80027ae <__swbuf_r+0x1a>
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <__swbuf_r+0xa0>)
 8002810:	429c      	cmp	r4, r3
 8002812:	bf08      	it	eq
 8002814:	68ec      	ldreq	r4, [r5, #12]
 8002816:	e7ca      	b.n	80027ae <__swbuf_r+0x1a>
 8002818:	4621      	mov	r1, r4
 800281a:	4628      	mov	r0, r5
 800281c:	f000 f80c 	bl	8002838 <__swsetup_r>
 8002820:	2800      	cmp	r0, #0
 8002822:	d0cb      	beq.n	80027bc <__swbuf_r+0x28>
 8002824:	f04f 37ff 	mov.w	r7, #4294967295
 8002828:	e7ea      	b.n	8002800 <__swbuf_r+0x6c>
 800282a:	bf00      	nop
 800282c:	080030b0 	.word	0x080030b0
 8002830:	080030d0 	.word	0x080030d0
 8002834:	08003090 	.word	0x08003090

08002838 <__swsetup_r>:
 8002838:	4b32      	ldr	r3, [pc, #200]	; (8002904 <__swsetup_r+0xcc>)
 800283a:	b570      	push	{r4, r5, r6, lr}
 800283c:	681d      	ldr	r5, [r3, #0]
 800283e:	4606      	mov	r6, r0
 8002840:	460c      	mov	r4, r1
 8002842:	b125      	cbz	r5, 800284e <__swsetup_r+0x16>
 8002844:	69ab      	ldr	r3, [r5, #24]
 8002846:	b913      	cbnz	r3, 800284e <__swsetup_r+0x16>
 8002848:	4628      	mov	r0, r5
 800284a:	f000 f981 	bl	8002b50 <__sinit>
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <__swsetup_r+0xd0>)
 8002850:	429c      	cmp	r4, r3
 8002852:	d10f      	bne.n	8002874 <__swsetup_r+0x3c>
 8002854:	686c      	ldr	r4, [r5, #4]
 8002856:	89a3      	ldrh	r3, [r4, #12]
 8002858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800285c:	0719      	lsls	r1, r3, #28
 800285e:	d42c      	bmi.n	80028ba <__swsetup_r+0x82>
 8002860:	06dd      	lsls	r5, r3, #27
 8002862:	d411      	bmi.n	8002888 <__swsetup_r+0x50>
 8002864:	2309      	movs	r3, #9
 8002866:	6033      	str	r3, [r6, #0]
 8002868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	81a3      	strh	r3, [r4, #12]
 8002872:	e03e      	b.n	80028f2 <__swsetup_r+0xba>
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <__swsetup_r+0xd4>)
 8002876:	429c      	cmp	r4, r3
 8002878:	d101      	bne.n	800287e <__swsetup_r+0x46>
 800287a:	68ac      	ldr	r4, [r5, #8]
 800287c:	e7eb      	b.n	8002856 <__swsetup_r+0x1e>
 800287e:	4b24      	ldr	r3, [pc, #144]	; (8002910 <__swsetup_r+0xd8>)
 8002880:	429c      	cmp	r4, r3
 8002882:	bf08      	it	eq
 8002884:	68ec      	ldreq	r4, [r5, #12]
 8002886:	e7e6      	b.n	8002856 <__swsetup_r+0x1e>
 8002888:	0758      	lsls	r0, r3, #29
 800288a:	d512      	bpl.n	80028b2 <__swsetup_r+0x7a>
 800288c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800288e:	b141      	cbz	r1, 80028a2 <__swsetup_r+0x6a>
 8002890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002894:	4299      	cmp	r1, r3
 8002896:	d002      	beq.n	800289e <__swsetup_r+0x66>
 8002898:	4630      	mov	r0, r6
 800289a:	f7ff fba1 	bl	8001fe0 <_free_r>
 800289e:	2300      	movs	r3, #0
 80028a0:	6363      	str	r3, [r4, #52]	; 0x34
 80028a2:	89a3      	ldrh	r3, [r4, #12]
 80028a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028a8:	81a3      	strh	r3, [r4, #12]
 80028aa:	2300      	movs	r3, #0
 80028ac:	6063      	str	r3, [r4, #4]
 80028ae:	6923      	ldr	r3, [r4, #16]
 80028b0:	6023      	str	r3, [r4, #0]
 80028b2:	89a3      	ldrh	r3, [r4, #12]
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	81a3      	strh	r3, [r4, #12]
 80028ba:	6923      	ldr	r3, [r4, #16]
 80028bc:	b94b      	cbnz	r3, 80028d2 <__swsetup_r+0x9a>
 80028be:	89a3      	ldrh	r3, [r4, #12]
 80028c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c8:	d003      	beq.n	80028d2 <__swsetup_r+0x9a>
 80028ca:	4621      	mov	r1, r4
 80028cc:	4630      	mov	r0, r6
 80028ce:	f000 fa05 	bl	8002cdc <__smakebuf_r>
 80028d2:	89a0      	ldrh	r0, [r4, #12]
 80028d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028d8:	f010 0301 	ands.w	r3, r0, #1
 80028dc:	d00a      	beq.n	80028f4 <__swsetup_r+0xbc>
 80028de:	2300      	movs	r3, #0
 80028e0:	60a3      	str	r3, [r4, #8]
 80028e2:	6963      	ldr	r3, [r4, #20]
 80028e4:	425b      	negs	r3, r3
 80028e6:	61a3      	str	r3, [r4, #24]
 80028e8:	6923      	ldr	r3, [r4, #16]
 80028ea:	b943      	cbnz	r3, 80028fe <__swsetup_r+0xc6>
 80028ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80028f0:	d1ba      	bne.n	8002868 <__swsetup_r+0x30>
 80028f2:	bd70      	pop	{r4, r5, r6, pc}
 80028f4:	0781      	lsls	r1, r0, #30
 80028f6:	bf58      	it	pl
 80028f8:	6963      	ldrpl	r3, [r4, #20]
 80028fa:	60a3      	str	r3, [r4, #8]
 80028fc:	e7f4      	b.n	80028e8 <__swsetup_r+0xb0>
 80028fe:	2000      	movs	r0, #0
 8002900:	e7f7      	b.n	80028f2 <__swsetup_r+0xba>
 8002902:	bf00      	nop
 8002904:	2000000c 	.word	0x2000000c
 8002908:	080030b0 	.word	0x080030b0
 800290c:	080030d0 	.word	0x080030d0
 8002910:	08003090 	.word	0x08003090

08002914 <abort>:
 8002914:	2006      	movs	r0, #6
 8002916:	b508      	push	{r3, lr}
 8002918:	f000 fa62 	bl	8002de0 <raise>
 800291c:	2001      	movs	r0, #1
 800291e:	f7fd fe68 	bl	80005f2 <_exit>
	...

08002924 <__sflush_r>:
 8002924:	898a      	ldrh	r2, [r1, #12]
 8002926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002928:	4605      	mov	r5, r0
 800292a:	0710      	lsls	r0, r2, #28
 800292c:	460c      	mov	r4, r1
 800292e:	d457      	bmi.n	80029e0 <__sflush_r+0xbc>
 8002930:	684b      	ldr	r3, [r1, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	dc04      	bgt.n	8002940 <__sflush_r+0x1c>
 8002936:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	dc01      	bgt.n	8002940 <__sflush_r+0x1c>
 800293c:	2000      	movs	r0, #0
 800293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002942:	2e00      	cmp	r6, #0
 8002944:	d0fa      	beq.n	800293c <__sflush_r+0x18>
 8002946:	2300      	movs	r3, #0
 8002948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800294c:	682f      	ldr	r7, [r5, #0]
 800294e:	602b      	str	r3, [r5, #0]
 8002950:	d032      	beq.n	80029b8 <__sflush_r+0x94>
 8002952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002954:	89a3      	ldrh	r3, [r4, #12]
 8002956:	075a      	lsls	r2, r3, #29
 8002958:	d505      	bpl.n	8002966 <__sflush_r+0x42>
 800295a:	6863      	ldr	r3, [r4, #4]
 800295c:	1ac0      	subs	r0, r0, r3
 800295e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002960:	b10b      	cbz	r3, 8002966 <__sflush_r+0x42>
 8002962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002964:	1ac0      	subs	r0, r0, r3
 8002966:	2300      	movs	r3, #0
 8002968:	4602      	mov	r2, r0
 800296a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800296c:	4628      	mov	r0, r5
 800296e:	6a21      	ldr	r1, [r4, #32]
 8002970:	47b0      	blx	r6
 8002972:	1c43      	adds	r3, r0, #1
 8002974:	89a3      	ldrh	r3, [r4, #12]
 8002976:	d106      	bne.n	8002986 <__sflush_r+0x62>
 8002978:	6829      	ldr	r1, [r5, #0]
 800297a:	291d      	cmp	r1, #29
 800297c:	d82c      	bhi.n	80029d8 <__sflush_r+0xb4>
 800297e:	4a29      	ldr	r2, [pc, #164]	; (8002a24 <__sflush_r+0x100>)
 8002980:	40ca      	lsrs	r2, r1
 8002982:	07d6      	lsls	r6, r2, #31
 8002984:	d528      	bpl.n	80029d8 <__sflush_r+0xb4>
 8002986:	2200      	movs	r2, #0
 8002988:	6062      	str	r2, [r4, #4]
 800298a:	6922      	ldr	r2, [r4, #16]
 800298c:	04d9      	lsls	r1, r3, #19
 800298e:	6022      	str	r2, [r4, #0]
 8002990:	d504      	bpl.n	800299c <__sflush_r+0x78>
 8002992:	1c42      	adds	r2, r0, #1
 8002994:	d101      	bne.n	800299a <__sflush_r+0x76>
 8002996:	682b      	ldr	r3, [r5, #0]
 8002998:	b903      	cbnz	r3, 800299c <__sflush_r+0x78>
 800299a:	6560      	str	r0, [r4, #84]	; 0x54
 800299c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800299e:	602f      	str	r7, [r5, #0]
 80029a0:	2900      	cmp	r1, #0
 80029a2:	d0cb      	beq.n	800293c <__sflush_r+0x18>
 80029a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029a8:	4299      	cmp	r1, r3
 80029aa:	d002      	beq.n	80029b2 <__sflush_r+0x8e>
 80029ac:	4628      	mov	r0, r5
 80029ae:	f7ff fb17 	bl	8001fe0 <_free_r>
 80029b2:	2000      	movs	r0, #0
 80029b4:	6360      	str	r0, [r4, #52]	; 0x34
 80029b6:	e7c2      	b.n	800293e <__sflush_r+0x1a>
 80029b8:	6a21      	ldr	r1, [r4, #32]
 80029ba:	2301      	movs	r3, #1
 80029bc:	4628      	mov	r0, r5
 80029be:	47b0      	blx	r6
 80029c0:	1c41      	adds	r1, r0, #1
 80029c2:	d1c7      	bne.n	8002954 <__sflush_r+0x30>
 80029c4:	682b      	ldr	r3, [r5, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0c4      	beq.n	8002954 <__sflush_r+0x30>
 80029ca:	2b1d      	cmp	r3, #29
 80029cc:	d001      	beq.n	80029d2 <__sflush_r+0xae>
 80029ce:	2b16      	cmp	r3, #22
 80029d0:	d101      	bne.n	80029d6 <__sflush_r+0xb2>
 80029d2:	602f      	str	r7, [r5, #0]
 80029d4:	e7b2      	b.n	800293c <__sflush_r+0x18>
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029dc:	81a3      	strh	r3, [r4, #12]
 80029de:	e7ae      	b.n	800293e <__sflush_r+0x1a>
 80029e0:	690f      	ldr	r7, [r1, #16]
 80029e2:	2f00      	cmp	r7, #0
 80029e4:	d0aa      	beq.n	800293c <__sflush_r+0x18>
 80029e6:	0793      	lsls	r3, r2, #30
 80029e8:	bf18      	it	ne
 80029ea:	2300      	movne	r3, #0
 80029ec:	680e      	ldr	r6, [r1, #0]
 80029ee:	bf08      	it	eq
 80029f0:	694b      	ldreq	r3, [r1, #20]
 80029f2:	1bf6      	subs	r6, r6, r7
 80029f4:	600f      	str	r7, [r1, #0]
 80029f6:	608b      	str	r3, [r1, #8]
 80029f8:	2e00      	cmp	r6, #0
 80029fa:	dd9f      	ble.n	800293c <__sflush_r+0x18>
 80029fc:	4633      	mov	r3, r6
 80029fe:	463a      	mov	r2, r7
 8002a00:	4628      	mov	r0, r5
 8002a02:	6a21      	ldr	r1, [r4, #32]
 8002a04:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002a08:	47e0      	blx	ip
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	dc06      	bgt.n	8002a1c <__sflush_r+0xf8>
 8002a0e:	89a3      	ldrh	r3, [r4, #12]
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a18:	81a3      	strh	r3, [r4, #12]
 8002a1a:	e790      	b.n	800293e <__sflush_r+0x1a>
 8002a1c:	4407      	add	r7, r0
 8002a1e:	1a36      	subs	r6, r6, r0
 8002a20:	e7ea      	b.n	80029f8 <__sflush_r+0xd4>
 8002a22:	bf00      	nop
 8002a24:	20400001 	.word	0x20400001

08002a28 <_fflush_r>:
 8002a28:	b538      	push	{r3, r4, r5, lr}
 8002a2a:	690b      	ldr	r3, [r1, #16]
 8002a2c:	4605      	mov	r5, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	b913      	cbnz	r3, 8002a38 <_fflush_r+0x10>
 8002a32:	2500      	movs	r5, #0
 8002a34:	4628      	mov	r0, r5
 8002a36:	bd38      	pop	{r3, r4, r5, pc}
 8002a38:	b118      	cbz	r0, 8002a42 <_fflush_r+0x1a>
 8002a3a:	6983      	ldr	r3, [r0, #24]
 8002a3c:	b90b      	cbnz	r3, 8002a42 <_fflush_r+0x1a>
 8002a3e:	f000 f887 	bl	8002b50 <__sinit>
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <_fflush_r+0x6c>)
 8002a44:	429c      	cmp	r4, r3
 8002a46:	d11b      	bne.n	8002a80 <_fflush_r+0x58>
 8002a48:	686c      	ldr	r4, [r5, #4]
 8002a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0ef      	beq.n	8002a32 <_fflush_r+0xa>
 8002a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a54:	07d0      	lsls	r0, r2, #31
 8002a56:	d404      	bmi.n	8002a62 <_fflush_r+0x3a>
 8002a58:	0599      	lsls	r1, r3, #22
 8002a5a:	d402      	bmi.n	8002a62 <_fflush_r+0x3a>
 8002a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a5e:	f000 f915 	bl	8002c8c <__retarget_lock_acquire_recursive>
 8002a62:	4628      	mov	r0, r5
 8002a64:	4621      	mov	r1, r4
 8002a66:	f7ff ff5d 	bl	8002924 <__sflush_r>
 8002a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	07da      	lsls	r2, r3, #31
 8002a70:	d4e0      	bmi.n	8002a34 <_fflush_r+0xc>
 8002a72:	89a3      	ldrh	r3, [r4, #12]
 8002a74:	059b      	lsls	r3, r3, #22
 8002a76:	d4dd      	bmi.n	8002a34 <_fflush_r+0xc>
 8002a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a7a:	f000 f908 	bl	8002c8e <__retarget_lock_release_recursive>
 8002a7e:	e7d9      	b.n	8002a34 <_fflush_r+0xc>
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <_fflush_r+0x70>)
 8002a82:	429c      	cmp	r4, r3
 8002a84:	d101      	bne.n	8002a8a <_fflush_r+0x62>
 8002a86:	68ac      	ldr	r4, [r5, #8]
 8002a88:	e7df      	b.n	8002a4a <_fflush_r+0x22>
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <_fflush_r+0x74>)
 8002a8c:	429c      	cmp	r4, r3
 8002a8e:	bf08      	it	eq
 8002a90:	68ec      	ldreq	r4, [r5, #12]
 8002a92:	e7da      	b.n	8002a4a <_fflush_r+0x22>
 8002a94:	080030b0 	.word	0x080030b0
 8002a98:	080030d0 	.word	0x080030d0
 8002a9c:	08003090 	.word	0x08003090

08002aa0 <std>:
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	b510      	push	{r4, lr}
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8002aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002aae:	6083      	str	r3, [r0, #8]
 8002ab0:	8181      	strh	r1, [r0, #12]
 8002ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8002ab4:	81c2      	strh	r2, [r0, #14]
 8002ab6:	6183      	str	r3, [r0, #24]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	2208      	movs	r2, #8
 8002abc:	305c      	adds	r0, #92	; 0x5c
 8002abe:	f7ff fa11 	bl	8001ee4 <memset>
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <std+0x38>)
 8002ac4:	6224      	str	r4, [r4, #32]
 8002ac6:	6263      	str	r3, [r4, #36]	; 0x24
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <std+0x3c>)
 8002aca:	62a3      	str	r3, [r4, #40]	; 0x28
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <std+0x40>)
 8002ace:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <std+0x44>)
 8002ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08002e19 	.word	0x08002e19
 8002adc:	08002e3b 	.word	0x08002e3b
 8002ae0:	08002e73 	.word	0x08002e73
 8002ae4:	08002e97 	.word	0x08002e97

08002ae8 <_cleanup_r>:
 8002ae8:	4901      	ldr	r1, [pc, #4]	; (8002af0 <_cleanup_r+0x8>)
 8002aea:	f000 b8af 	b.w	8002c4c <_fwalk_reent>
 8002aee:	bf00      	nop
 8002af0:	08002a29 	.word	0x08002a29

08002af4 <__sfmoreglue>:
 8002af4:	2268      	movs	r2, #104	; 0x68
 8002af6:	b570      	push	{r4, r5, r6, lr}
 8002af8:	1e4d      	subs	r5, r1, #1
 8002afa:	4355      	muls	r5, r2
 8002afc:	460e      	mov	r6, r1
 8002afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b02:	f7ff fad5 	bl	80020b0 <_malloc_r>
 8002b06:	4604      	mov	r4, r0
 8002b08:	b140      	cbz	r0, 8002b1c <__sfmoreglue+0x28>
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8002b10:	300c      	adds	r0, #12
 8002b12:	60a0      	str	r0, [r4, #8]
 8002b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b18:	f7ff f9e4 	bl	8001ee4 <memset>
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}

08002b20 <__sfp_lock_acquire>:
 8002b20:	4801      	ldr	r0, [pc, #4]	; (8002b28 <__sfp_lock_acquire+0x8>)
 8002b22:	f000 b8b3 	b.w	8002c8c <__retarget_lock_acquire_recursive>
 8002b26:	bf00      	nop
 8002b28:	2000012d 	.word	0x2000012d

08002b2c <__sfp_lock_release>:
 8002b2c:	4801      	ldr	r0, [pc, #4]	; (8002b34 <__sfp_lock_release+0x8>)
 8002b2e:	f000 b8ae 	b.w	8002c8e <__retarget_lock_release_recursive>
 8002b32:	bf00      	nop
 8002b34:	2000012d 	.word	0x2000012d

08002b38 <__sinit_lock_acquire>:
 8002b38:	4801      	ldr	r0, [pc, #4]	; (8002b40 <__sinit_lock_acquire+0x8>)
 8002b3a:	f000 b8a7 	b.w	8002c8c <__retarget_lock_acquire_recursive>
 8002b3e:	bf00      	nop
 8002b40:	2000012e 	.word	0x2000012e

08002b44 <__sinit_lock_release>:
 8002b44:	4801      	ldr	r0, [pc, #4]	; (8002b4c <__sinit_lock_release+0x8>)
 8002b46:	f000 b8a2 	b.w	8002c8e <__retarget_lock_release_recursive>
 8002b4a:	bf00      	nop
 8002b4c:	2000012e 	.word	0x2000012e

08002b50 <__sinit>:
 8002b50:	b510      	push	{r4, lr}
 8002b52:	4604      	mov	r4, r0
 8002b54:	f7ff fff0 	bl	8002b38 <__sinit_lock_acquire>
 8002b58:	69a3      	ldr	r3, [r4, #24]
 8002b5a:	b11b      	cbz	r3, 8002b64 <__sinit+0x14>
 8002b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b60:	f7ff bff0 	b.w	8002b44 <__sinit_lock_release>
 8002b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b68:	6523      	str	r3, [r4, #80]	; 0x50
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <__sinit+0x68>)
 8002b6c:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <__sinit+0x6c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b72:	42a3      	cmp	r3, r4
 8002b74:	bf08      	it	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	4620      	mov	r0, r4
 8002b7a:	bf08      	it	eq
 8002b7c:	61a3      	streq	r3, [r4, #24]
 8002b7e:	f000 f81f 	bl	8002bc0 <__sfp>
 8002b82:	6060      	str	r0, [r4, #4]
 8002b84:	4620      	mov	r0, r4
 8002b86:	f000 f81b 	bl	8002bc0 <__sfp>
 8002b8a:	60a0      	str	r0, [r4, #8]
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f000 f817 	bl	8002bc0 <__sfp>
 8002b92:	2200      	movs	r2, #0
 8002b94:	2104      	movs	r1, #4
 8002b96:	60e0      	str	r0, [r4, #12]
 8002b98:	6860      	ldr	r0, [r4, #4]
 8002b9a:	f7ff ff81 	bl	8002aa0 <std>
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2109      	movs	r1, #9
 8002ba2:	68a0      	ldr	r0, [r4, #8]
 8002ba4:	f7ff ff7c 	bl	8002aa0 <std>
 8002ba8:	2202      	movs	r2, #2
 8002baa:	2112      	movs	r1, #18
 8002bac:	68e0      	ldr	r0, [r4, #12]
 8002bae:	f7ff ff77 	bl	8002aa0 <std>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61a3      	str	r3, [r4, #24]
 8002bb6:	e7d1      	b.n	8002b5c <__sinit+0xc>
 8002bb8:	08002fa8 	.word	0x08002fa8
 8002bbc:	08002ae9 	.word	0x08002ae9

08002bc0 <__sfp>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	4607      	mov	r7, r0
 8002bc4:	f7ff ffac 	bl	8002b20 <__sfp_lock_acquire>
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <__sfp+0x84>)
 8002bca:	681e      	ldr	r6, [r3, #0]
 8002bcc:	69b3      	ldr	r3, [r6, #24]
 8002bce:	b913      	cbnz	r3, 8002bd6 <__sfp+0x16>
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	f7ff ffbd 	bl	8002b50 <__sinit>
 8002bd6:	3648      	adds	r6, #72	; 0x48
 8002bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	d503      	bpl.n	8002be8 <__sfp+0x28>
 8002be0:	6833      	ldr	r3, [r6, #0]
 8002be2:	b30b      	cbz	r3, 8002c28 <__sfp+0x68>
 8002be4:	6836      	ldr	r6, [r6, #0]
 8002be6:	e7f7      	b.n	8002bd8 <__sfp+0x18>
 8002be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002bec:	b9d5      	cbnz	r5, 8002c24 <__sfp+0x64>
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <__sfp+0x88>)
 8002bf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bf4:	60e3      	str	r3, [r4, #12]
 8002bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8002bf8:	f000 f847 	bl	8002c8a <__retarget_lock_init_recursive>
 8002bfc:	f7ff ff96 	bl	8002b2c <__sfp_lock_release>
 8002c00:	2208      	movs	r2, #8
 8002c02:	4629      	mov	r1, r5
 8002c04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c0c:	6025      	str	r5, [r4, #0]
 8002c0e:	61a5      	str	r5, [r4, #24]
 8002c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c14:	f7ff f966 	bl	8001ee4 <memset>
 8002c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c20:	4620      	mov	r0, r4
 8002c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c24:	3468      	adds	r4, #104	; 0x68
 8002c26:	e7d9      	b.n	8002bdc <__sfp+0x1c>
 8002c28:	2104      	movs	r1, #4
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	f7ff ff62 	bl	8002af4 <__sfmoreglue>
 8002c30:	4604      	mov	r4, r0
 8002c32:	6030      	str	r0, [r6, #0]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d1d5      	bne.n	8002be4 <__sfp+0x24>
 8002c38:	f7ff ff78 	bl	8002b2c <__sfp_lock_release>
 8002c3c:	230c      	movs	r3, #12
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	e7ee      	b.n	8002c20 <__sfp+0x60>
 8002c42:	bf00      	nop
 8002c44:	08002fa8 	.word	0x08002fa8
 8002c48:	ffff0001 	.word	0xffff0001

08002c4c <_fwalk_reent>:
 8002c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c50:	4606      	mov	r6, r0
 8002c52:	4688      	mov	r8, r1
 8002c54:	2700      	movs	r7, #0
 8002c56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c5e:	f1b9 0901 	subs.w	r9, r9, #1
 8002c62:	d505      	bpl.n	8002c70 <_fwalk_reent+0x24>
 8002c64:	6824      	ldr	r4, [r4, #0]
 8002c66:	2c00      	cmp	r4, #0
 8002c68:	d1f7      	bne.n	8002c5a <_fwalk_reent+0xe>
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c70:	89ab      	ldrh	r3, [r5, #12]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d907      	bls.n	8002c86 <_fwalk_reent+0x3a>
 8002c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	d003      	beq.n	8002c86 <_fwalk_reent+0x3a>
 8002c7e:	4629      	mov	r1, r5
 8002c80:	4630      	mov	r0, r6
 8002c82:	47c0      	blx	r8
 8002c84:	4307      	orrs	r7, r0
 8002c86:	3568      	adds	r5, #104	; 0x68
 8002c88:	e7e9      	b.n	8002c5e <_fwalk_reent+0x12>

08002c8a <__retarget_lock_init_recursive>:
 8002c8a:	4770      	bx	lr

08002c8c <__retarget_lock_acquire_recursive>:
 8002c8c:	4770      	bx	lr

08002c8e <__retarget_lock_release_recursive>:
 8002c8e:	4770      	bx	lr

08002c90 <__swhatbuf_r>:
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	460e      	mov	r6, r1
 8002c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c98:	4614      	mov	r4, r2
 8002c9a:	2900      	cmp	r1, #0
 8002c9c:	461d      	mov	r5, r3
 8002c9e:	b096      	sub	sp, #88	; 0x58
 8002ca0:	da08      	bge.n	8002cb4 <__swhatbuf_r+0x24>
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002ca8:	602a      	str	r2, [r5, #0]
 8002caa:	061a      	lsls	r2, r3, #24
 8002cac:	d410      	bmi.n	8002cd0 <__swhatbuf_r+0x40>
 8002cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb2:	e00e      	b.n	8002cd2 <__swhatbuf_r+0x42>
 8002cb4:	466a      	mov	r2, sp
 8002cb6:	f000 f915 	bl	8002ee4 <_fstat_r>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	dbf1      	blt.n	8002ca2 <__swhatbuf_r+0x12>
 8002cbe:	9a01      	ldr	r2, [sp, #4]
 8002cc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002cc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002cc8:	425a      	negs	r2, r3
 8002cca:	415a      	adcs	r2, r3
 8002ccc:	602a      	str	r2, [r5, #0]
 8002cce:	e7ee      	b.n	8002cae <__swhatbuf_r+0x1e>
 8002cd0:	2340      	movs	r3, #64	; 0x40
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	b016      	add	sp, #88	; 0x58
 8002cd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cdc <__smakebuf_r>:
 8002cdc:	898b      	ldrh	r3, [r1, #12]
 8002cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ce0:	079d      	lsls	r5, r3, #30
 8002ce2:	4606      	mov	r6, r0
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	d507      	bpl.n	8002cf8 <__smakebuf_r+0x1c>
 8002ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	6123      	str	r3, [r4, #16]
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	6163      	str	r3, [r4, #20]
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	466a      	mov	r2, sp
 8002cfa:	ab01      	add	r3, sp, #4
 8002cfc:	f7ff ffc8 	bl	8002c90 <__swhatbuf_r>
 8002d00:	9900      	ldr	r1, [sp, #0]
 8002d02:	4605      	mov	r5, r0
 8002d04:	4630      	mov	r0, r6
 8002d06:	f7ff f9d3 	bl	80020b0 <_malloc_r>
 8002d0a:	b948      	cbnz	r0, 8002d20 <__smakebuf_r+0x44>
 8002d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d10:	059a      	lsls	r2, r3, #22
 8002d12:	d4ef      	bmi.n	8002cf4 <__smakebuf_r+0x18>
 8002d14:	f023 0303 	bic.w	r3, r3, #3
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	81a3      	strh	r3, [r4, #12]
 8002d1e:	e7e3      	b.n	8002ce8 <__smakebuf_r+0xc>
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <__smakebuf_r+0x7c>)
 8002d22:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d24:	89a3      	ldrh	r3, [r4, #12]
 8002d26:	6020      	str	r0, [r4, #0]
 8002d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2c:	81a3      	strh	r3, [r4, #12]
 8002d2e:	9b00      	ldr	r3, [sp, #0]
 8002d30:	6120      	str	r0, [r4, #16]
 8002d32:	6163      	str	r3, [r4, #20]
 8002d34:	9b01      	ldr	r3, [sp, #4]
 8002d36:	b15b      	cbz	r3, 8002d50 <__smakebuf_r+0x74>
 8002d38:	4630      	mov	r0, r6
 8002d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d3e:	f000 f8e3 	bl	8002f08 <_isatty_r>
 8002d42:	b128      	cbz	r0, 8002d50 <__smakebuf_r+0x74>
 8002d44:	89a3      	ldrh	r3, [r4, #12]
 8002d46:	f023 0303 	bic.w	r3, r3, #3
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	81a3      	strh	r3, [r4, #12]
 8002d50:	89a0      	ldrh	r0, [r4, #12]
 8002d52:	4305      	orrs	r5, r0
 8002d54:	81a5      	strh	r5, [r4, #12]
 8002d56:	e7cd      	b.n	8002cf4 <__smakebuf_r+0x18>
 8002d58:	08002ae9 	.word	0x08002ae9

08002d5c <memchr>:
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	b510      	push	{r4, lr}
 8002d60:	b2c9      	uxtb	r1, r1
 8002d62:	4402      	add	r2, r0
 8002d64:	4293      	cmp	r3, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	d101      	bne.n	8002d6e <memchr+0x12>
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	e003      	b.n	8002d76 <memchr+0x1a>
 8002d6e:	7804      	ldrb	r4, [r0, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	428c      	cmp	r4, r1
 8002d74:	d1f6      	bne.n	8002d64 <memchr+0x8>
 8002d76:	bd10      	pop	{r4, pc}

08002d78 <__malloc_lock>:
 8002d78:	4801      	ldr	r0, [pc, #4]	; (8002d80 <__malloc_lock+0x8>)
 8002d7a:	f7ff bf87 	b.w	8002c8c <__retarget_lock_acquire_recursive>
 8002d7e:	bf00      	nop
 8002d80:	2000012c 	.word	0x2000012c

08002d84 <__malloc_unlock>:
 8002d84:	4801      	ldr	r0, [pc, #4]	; (8002d8c <__malloc_unlock+0x8>)
 8002d86:	f7ff bf82 	b.w	8002c8e <__retarget_lock_release_recursive>
 8002d8a:	bf00      	nop
 8002d8c:	2000012c 	.word	0x2000012c

08002d90 <_raise_r>:
 8002d90:	291f      	cmp	r1, #31
 8002d92:	b538      	push	{r3, r4, r5, lr}
 8002d94:	4604      	mov	r4, r0
 8002d96:	460d      	mov	r5, r1
 8002d98:	d904      	bls.n	8002da4 <_raise_r+0x14>
 8002d9a:	2316      	movs	r3, #22
 8002d9c:	6003      	str	r3, [r0, #0]
 8002d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
 8002da4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002da6:	b112      	cbz	r2, 8002dae <_raise_r+0x1e>
 8002da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002dac:	b94b      	cbnz	r3, 8002dc2 <_raise_r+0x32>
 8002dae:	4620      	mov	r0, r4
 8002db0:	f000 f830 	bl	8002e14 <_getpid_r>
 8002db4:	462a      	mov	r2, r5
 8002db6:	4601      	mov	r1, r0
 8002db8:	4620      	mov	r0, r4
 8002dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dbe:	f000 b817 	b.w	8002df0 <_kill_r>
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d00a      	beq.n	8002ddc <_raise_r+0x4c>
 8002dc6:	1c59      	adds	r1, r3, #1
 8002dc8:	d103      	bne.n	8002dd2 <_raise_r+0x42>
 8002dca:	2316      	movs	r3, #22
 8002dcc:	6003      	str	r3, [r0, #0]
 8002dce:	2001      	movs	r0, #1
 8002dd0:	e7e7      	b.n	8002da2 <_raise_r+0x12>
 8002dd2:	2400      	movs	r4, #0
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002dda:	4798      	blx	r3
 8002ddc:	2000      	movs	r0, #0
 8002dde:	e7e0      	b.n	8002da2 <_raise_r+0x12>

08002de0 <raise>:
 8002de0:	4b02      	ldr	r3, [pc, #8]	; (8002dec <raise+0xc>)
 8002de2:	4601      	mov	r1, r0
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	f7ff bfd3 	b.w	8002d90 <_raise_r>
 8002dea:	bf00      	nop
 8002dec:	2000000c 	.word	0x2000000c

08002df0 <_kill_r>:
 8002df0:	b538      	push	{r3, r4, r5, lr}
 8002df2:	2300      	movs	r3, #0
 8002df4:	4d06      	ldr	r5, [pc, #24]	; (8002e10 <_kill_r+0x20>)
 8002df6:	4604      	mov	r4, r0
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	602b      	str	r3, [r5, #0]
 8002dfe:	f7fd fbe8 	bl	80005d2 <_kill>
 8002e02:	1c43      	adds	r3, r0, #1
 8002e04:	d102      	bne.n	8002e0c <_kill_r+0x1c>
 8002e06:	682b      	ldr	r3, [r5, #0]
 8002e08:	b103      	cbz	r3, 8002e0c <_kill_r+0x1c>
 8002e0a:	6023      	str	r3, [r4, #0]
 8002e0c:	bd38      	pop	{r3, r4, r5, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000130 	.word	0x20000130

08002e14 <_getpid_r>:
 8002e14:	f7fd bbd6 	b.w	80005c4 <_getpid>

08002e18 <__sread>:
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e20:	f000 f894 	bl	8002f4c <_read_r>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	bfab      	itete	ge
 8002e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8002e2c:	181b      	addge	r3, r3, r0
 8002e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e32:	bfac      	ite	ge
 8002e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e36:	81a3      	strhlt	r3, [r4, #12]
 8002e38:	bd10      	pop	{r4, pc}

08002e3a <__swrite>:
 8002e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e3e:	461f      	mov	r7, r3
 8002e40:	898b      	ldrh	r3, [r1, #12]
 8002e42:	4605      	mov	r5, r0
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	460c      	mov	r4, r1
 8002e48:	4616      	mov	r6, r2
 8002e4a:	d505      	bpl.n	8002e58 <__swrite+0x1e>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e54:	f000 f868 	bl	8002f28 <_lseek_r>
 8002e58:	89a3      	ldrh	r3, [r4, #12]
 8002e5a:	4632      	mov	r2, r6
 8002e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e60:	81a3      	strh	r3, [r4, #12]
 8002e62:	4628      	mov	r0, r5
 8002e64:	463b      	mov	r3, r7
 8002e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e6e:	f000 b817 	b.w	8002ea0 <_write_r>

08002e72 <__sseek>:
 8002e72:	b510      	push	{r4, lr}
 8002e74:	460c      	mov	r4, r1
 8002e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e7a:	f000 f855 	bl	8002f28 <_lseek_r>
 8002e7e:	1c43      	adds	r3, r0, #1
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	bf15      	itete	ne
 8002e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e8e:	81a3      	strheq	r3, [r4, #12]
 8002e90:	bf18      	it	ne
 8002e92:	81a3      	strhne	r3, [r4, #12]
 8002e94:	bd10      	pop	{r4, pc}

08002e96 <__sclose>:
 8002e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e9a:	f000 b813 	b.w	8002ec4 <_close_r>
	...

08002ea0 <_write_r>:
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4d05      	ldr	r5, [pc, #20]	; (8002ec0 <_write_r+0x20>)
 8002eac:	602a      	str	r2, [r5, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f7fd fbc6 	bl	8000640 <_write>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d102      	bne.n	8002ebe <_write_r+0x1e>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	b103      	cbz	r3, 8002ebe <_write_r+0x1e>
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	20000130 	.word	0x20000130

08002ec4 <_close_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	4d05      	ldr	r5, [pc, #20]	; (8002ee0 <_close_r+0x1c>)
 8002eca:	4604      	mov	r4, r0
 8002ecc:	4608      	mov	r0, r1
 8002ece:	602b      	str	r3, [r5, #0]
 8002ed0:	f7fd fbd2 	bl	8000678 <_close>
 8002ed4:	1c43      	adds	r3, r0, #1
 8002ed6:	d102      	bne.n	8002ede <_close_r+0x1a>
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	b103      	cbz	r3, 8002ede <_close_r+0x1a>
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	bd38      	pop	{r3, r4, r5, pc}
 8002ee0:	20000130 	.word	0x20000130

08002ee4 <_fstat_r>:
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	4d06      	ldr	r5, [pc, #24]	; (8002f04 <_fstat_r+0x20>)
 8002eea:	4604      	mov	r4, r0
 8002eec:	4608      	mov	r0, r1
 8002eee:	4611      	mov	r1, r2
 8002ef0:	602b      	str	r3, [r5, #0]
 8002ef2:	f7fd fbcc 	bl	800068e <_fstat>
 8002ef6:	1c43      	adds	r3, r0, #1
 8002ef8:	d102      	bne.n	8002f00 <_fstat_r+0x1c>
 8002efa:	682b      	ldr	r3, [r5, #0]
 8002efc:	b103      	cbz	r3, 8002f00 <_fstat_r+0x1c>
 8002efe:	6023      	str	r3, [r4, #0]
 8002f00:	bd38      	pop	{r3, r4, r5, pc}
 8002f02:	bf00      	nop
 8002f04:	20000130 	.word	0x20000130

08002f08 <_isatty_r>:
 8002f08:	b538      	push	{r3, r4, r5, lr}
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	4d05      	ldr	r5, [pc, #20]	; (8002f24 <_isatty_r+0x1c>)
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4608      	mov	r0, r1
 8002f12:	602b      	str	r3, [r5, #0]
 8002f14:	f7fd fbca 	bl	80006ac <_isatty>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d102      	bne.n	8002f22 <_isatty_r+0x1a>
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	b103      	cbz	r3, 8002f22 <_isatty_r+0x1a>
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	20000130 	.word	0x20000130

08002f28 <_lseek_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	2200      	movs	r2, #0
 8002f32:	4d05      	ldr	r5, [pc, #20]	; (8002f48 <_lseek_r+0x20>)
 8002f34:	602a      	str	r2, [r5, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f7fd fbc2 	bl	80006c0 <_lseek>
 8002f3c:	1c43      	adds	r3, r0, #1
 8002f3e:	d102      	bne.n	8002f46 <_lseek_r+0x1e>
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	b103      	cbz	r3, 8002f46 <_lseek_r+0x1e>
 8002f44:	6023      	str	r3, [r4, #0]
 8002f46:	bd38      	pop	{r3, r4, r5, pc}
 8002f48:	20000130 	.word	0x20000130

08002f4c <_read_r>:
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	4604      	mov	r4, r0
 8002f50:	4608      	mov	r0, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	2200      	movs	r2, #0
 8002f56:	4d05      	ldr	r5, [pc, #20]	; (8002f6c <_read_r+0x20>)
 8002f58:	602a      	str	r2, [r5, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f7fd fb53 	bl	8000606 <_read>
 8002f60:	1c43      	adds	r3, r0, #1
 8002f62:	d102      	bne.n	8002f6a <_read_r+0x1e>
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	b103      	cbz	r3, 8002f6a <_read_r+0x1e>
 8002f68:	6023      	str	r3, [r4, #0]
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
 8002f6c:	20000130 	.word	0x20000130

08002f70 <_init>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr

08002f7c <_fini>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr
